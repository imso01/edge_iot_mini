
mini_bt_dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007800  08007800  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007808  08007808  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007808  08007808  00008808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800780c  0800780c  0000880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007810  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  20000068  08007878  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08007878  00009bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb5  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2b  00000000  00000000  0001cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0001fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea8  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e2b  00000000  00000000  00021cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172cc  00000000  00000000  0003bb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009edca  00000000  00000000  00052dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b78  00000000  00000000  000f1bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f7754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007078 	.word	0x08007078

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007078 	.word	0x08007078

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <CDS_Read>:
 */

#include "cds.h"

uint16_t CDS_Read(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

// ADC1을 PA5 (CDS)용 채널 5로 설정
sConfig.Channel = ADC_CHANNEL_5;
 80005b2:	2305      	movs	r3, #5
 80005b4:	607b      	str	r3, [r7, #4]
sConfig.Rank = 1;  // 첫 번째 변환 우선순위
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	480e      	ldr	r0, [pc, #56]	@ (80005fc <CDS_Read+0x5c>)
 80005c4:	f001 ff2a 	bl	800241c <HAL_ADC_ConfigChannel>
    // ADC 변환 시작
    HAL_ADC_Start(&hadc1);
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <CDS_Read+0x5c>)
 80005ca:	f001 fda7 	bl	800211c <HAL_ADC_Start>

    // 변환 완료 대기
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80005ce:	2164      	movs	r1, #100	@ 0x64
 80005d0:	480a      	ldr	r0, [pc, #40]	@ (80005fc <CDS_Read+0x5c>)
 80005d2:	f001 fe8a 	bl	80022ea <HAL_ADC_PollForConversion>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d109      	bne.n	80005f0 <CDS_Read+0x50>
    {
        // 변환 값 읽기
        uint16_t cdsAdc = HAL_ADC_GetValue(&hadc1);
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <CDS_Read+0x5c>)
 80005de:	f001 ff0f 	bl	8002400 <HAL_ADC_GetValue>
 80005e2:	4603      	mov	r3, r0
 80005e4:	82fb      	strh	r3, [r7, #22]
        HAL_ADC_Stop(&hadc1);  // ADC 변환 정지
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <CDS_Read+0x5c>)
 80005e8:	f001 fe4c 	bl	8002284 <HAL_ADC_Stop>
        return cdsAdc;
 80005ec:	8afb      	ldrh	r3, [r7, #22]
 80005ee:	e000      	b.n	80005f2 <CDS_Read+0x52>
    }
    return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000096c 	.word	0x2000096c

08000600 <Set_Pin_ANALOG_CDS>:

void Set_Pin_ANALOG_CDS (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]


	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f002 fac8 	bl	8002bc0 <HAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <CDS_readData>:

CDS_Typedef CDS_readData()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	CDS_Typedef cds;
	Set_Pin_ANALOG_CDS(CDS_PORT, CDS_PIN);
 800063e:	2120      	movs	r1, #32
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <CDS_readData+0x20>)
 8000642:	f7ff ffdd 	bl	8000600 <Set_Pin_ANALOG_CDS>
	cds.cds_value = CDS_Read();
 8000646:	f7ff ffab 	bl	80005a0 <CDS_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	80bb      	strh	r3, [r7, #4]
	return cds;
 800064e:	88bb      	ldrh	r3, [r7, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020000 	.word	0x40020000

0800065c <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 8000664:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <LCD_init+0x6c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 800066a:	2032      	movs	r0, #50	@ 0x32
 800066c:	f001 fcee 	bl	800204c <HAL_Delay>
	LCD_cmdMode();
 8000670:	f000 f89a 	bl	80007a8 <LCD_cmdMode>
	LCD_writeMode();
 8000674:	f000 f8b8 	bl	80007e8 <LCD_writeMode>
	LCD_sendData(0x30);
 8000678:	2030      	movs	r0, #48	@ 0x30
 800067a:	f000 f849 	bl	8000710 <LCD_sendData>
	HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f001 fce4 	bl	800204c <HAL_Delay>
	LCD_sendData(0x30);
 8000684:	2030      	movs	r0, #48	@ 0x30
 8000686:	f000 f843 	bl	8000710 <LCD_sendData>
	HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f001 fcde 	bl	800204c <HAL_Delay>
	LCD_sendData(0x30);
 8000690:	2030      	movs	r0, #48	@ 0x30
 8000692:	f000 f83d 	bl	8000710 <LCD_sendData>
	LCD_sendData(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f000 f83a 	bl	8000710 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 800069c:	2028      	movs	r0, #40	@ 0x28
 800069e:	f000 f85f 	bl	8000760 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 80006a2:	2008      	movs	r0, #8
 80006a4:	f000 f85c 	bl	8000760 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 f859 	bl	8000760 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 80006ae:	2006      	movs	r0, #6
 80006b0:	f000 f856 	bl	8000760 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 80006b4:	200c      	movs	r0, #12
 80006b6:	f000 f853 	bl	8000760 <LCD_sendByte>
	LCD_backLightOn();
 80006ba:	f000 f865 	bl	8000788 <LCD_backLightOn>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088

080006cc <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 80006d6:	f000 f867 	bl	80007a8 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 80006da:	f000 f885 	bl	80007e8 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f83d 	bl	8000760 <LCD_sendByte>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 80006f8:	f000 f866 	bl	80007c8 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 80006fc:	f000 f874 	bl	80007e8 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f82c 	bl	8000760 <LCD_sendByte>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800071a:	f000 f875 	bl	8000808 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800071e:	2002      	movs	r0, #2
 8000720:	f001 fc94 	bl	800204c <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <LCD_sendData+0x4c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	b25a      	sxtb	r2, r3
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	f023 030f 	bic.w	r3, r3, #15
 8000738:	b25b      	sxtb	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <LCD_sendData+0x4c>)
 8000742:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000744:	f000 f880 	bl	8000848 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 8000748:	f000 f86e 	bl	8000828 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 800074c:	2002      	movs	r0, #2
 800074e:	f001 fc7d 	bl	800204c <HAL_Delay>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000084 	.word	0x20000084

08000760 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffcf 	bl	8000710 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffc8 	bl	8000710 <LCD_sendData>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <LCD_backLightOn>:
void LCD_backLightOn() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <LCD_backLightOn+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <LCD_backLightOn+0x1c>)
 8000798:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800079a:	f000 f855 	bl	8000848 <LCD_sendDataToInterface>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <LCD_cmdMode+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <LCD_cmdMode+0x1c>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007ba:	f000 f845 	bl	8000848 <LCD_sendDataToInterface>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000084 	.word	0x20000084

080007c8 <LCD_charMode>:

void LCD_charMode() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <LCD_charMode+0x1c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <LCD_charMode+0x1c>)
 80007d8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007da:	f000 f835 	bl	8000848 <LCD_sendDataToInterface>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000084 	.word	0x20000084

080007e8 <LCD_writeMode>:

void LCD_writeMode() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <LCD_writeMode+0x1c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f023 0302 	bic.w	r3, r3, #2
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <LCD_writeMode+0x1c>)
 80007f8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80007fa:	f000 f825 	bl	8000848 <LCD_sendDataToInterface>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000084 	.word	0x20000084

08000808 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <LCD_enableHigh+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <LCD_enableHigh+0x1c>)
 8000818:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800081a:	f000 f815 	bl	8000848 <LCD_sendDataToInterface>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000084 	.word	0x20000084

08000828 <LCD_enableLow>:

void LCD_enableLow() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <LCD_enableLow+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f023 0304 	bic.w	r3, r3, #4
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <LCD_enableLow+0x1c>)
 8000838:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800083a:	f000 f805 	bl	8000848 <LCD_sendDataToInterface>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084

08000848 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <LCD_sendDataToInterface+0x20>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <LCD_sendDataToInterface+0x24>)
 800085a:	214e      	movs	r1, #78	@ 0x4e
 800085c:	f002 fcaa 	bl	80031b4 <HAL_I2C_Master_Transmit>
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000088 	.word	0x20000088
 800086c:	20000084 	.word	0x20000084

08000870 <LCD_writeString>:

void LCD_writeString(char *str) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e009      	b.n	8000892 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff31 	bl	80006ee <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1ef      	bne.n	800087e <LCD_writeString+0xe>
	}
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	4413      	add	r3, r2
 80008d2:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3b80      	subs	r3, #128	@ 0x80
 80008d8:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fef5 	bl	80006cc <LCD_writeCmdData>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	603a      	str	r2, [r7, #0]
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	460b      	mov	r3, r1
 80008f8:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffd1 	bl	80008a8 <LCD_gotoXY>
	LCD_writeString(str);
 8000906:	6838      	ldr	r0, [r7, #0]
 8000908:	f7ff ffb2 	bl	8000870 <LCD_writeString>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <DWT_Delay_Init>:
 */

#include "dht.h"

uint32_t DWT_Delay_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <DWT_Delay_Init+0x58>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4a13      	ldr	r2, [pc, #76]	@ (800096c <DWT_Delay_Init+0x58>)
 800091e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000922:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <DWT_Delay_Init+0x58>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a10      	ldr	r2, [pc, #64]	@ (800096c <DWT_Delay_Init+0x58>)
 800092a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800092e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <DWT_Delay_Init+0x5c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <DWT_Delay_Init+0x5c>)
 8000936:	f023 0301 	bic.w	r3, r3, #1
 800093a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <DWT_Delay_Init+0x5c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <DWT_Delay_Init+0x5c>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <DWT_Delay_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800094e:	bf00      	nop
  __ASM volatile ("NOP");
 8000950:	bf00      	nop
  __ASM volatile ("NOP");
 8000952:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <DWT_Delay_Init+0x5c>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 800095c:	2300      	movs	r3, #0
 800095e:	e000      	b.n	8000962 <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8000960:	2301      	movs	r3, #1
  }

}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000edf0 	.word	0xe000edf0
 8000970:	e0001000 	.word	0xe0001000

08000974 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800097c:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <DWT_Delay_us+0x40>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000982:	f003 fbd5 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8000986:	4603      	mov	r3, r0
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <DWT_Delay_us+0x44>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	0c9b      	lsrs	r3, r3, #18
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000998:	bf00      	nop
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <DWT_Delay_us+0x40>)
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	1ad2      	subs	r2, r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3f8      	bcc.n	800099a <DWT_Delay_us+0x26>
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e0001000 	.word	0xe0001000
 80009b8:	431bde83 	.word	0x431bde83

080009bc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f002 f8e8 	bl	8002bc0 <HAL_GPIO_Init>
}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f002 f8cc 	bl	8002bc0 <HAL_GPIO_Init>
}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000a34:	f7ff ff6e 	bl	8000914 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <DHT11_Init+0x2c>)
 8000a3e:	f7ff ffbd 	bl	80009bc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <DHT11_Init+0x2c>)
 8000a4a:	f002 fa55 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f001 fafb 	bl	800204c <HAL_Delay>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020800 	.word	0x40020800

08000a60 <DHT11_Start>:

void DHT11_Start (void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a68:	4811      	ldr	r0, [pc, #68]	@ (8000ab0 <DHT11_Start+0x50>)
 8000a6a:	f7ff ffa7 	bl	80009bc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a74:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <DHT11_Start+0x50>)
 8000a76:	f002 fa3f 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <DHT11_Start+0x50>)
 8000a82:	f002 fa39 	bl	8002ef8 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000a86:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000a8a:	f7ff ff73 	bl	8000974 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a94:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <DHT11_Start+0x50>)
 8000a96:	f002 fa2f 	bl	8002ef8 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000a9a:	2014      	movs	r0, #20
 8000a9c:	f7ff ff6a 	bl	8000974 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000aa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <DHT11_Start+0x50>)
 8000aa6:	f7ff ffa7 	bl	80009f8 <Set_Pin_Input>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000ab8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <DHT11_Stop+0x20>)
 8000abe:	f7ff ff7d 	bl	80009bc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <DHT11_Stop+0x20>)
 8000aca:	f002 fa15 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae6:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <DHT11_Check_Response+0x58>)
 8000ae8:	f002 f9ee 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10f      	bne.n	8000b12 <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 8000af2:	2050      	movs	r0, #80	@ 0x50
 8000af4:	f7ff ff3e 	bl	8000974 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <DHT11_Check_Response+0x58>)
 8000afe:	f002 f9e3 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <DHT11_Check_Response+0x36>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	e001      	b.n	8000b12 <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 8000b0e:	23ff      	movs	r3, #255	@ 0xff
 8000b10:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8000b12:	bf00      	nop
 8000b14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <DHT11_Check_Response+0x58>)
 8000b1a:	f002 f9d5 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f7      	bne.n	8000b14 <DHT11_Check_Response+0x3c>

	return Response;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020800 	.word	0x40020800

08000b34 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	e03a      	b.n	8000bb6 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000b40:	bf00      	nop
 8000b42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b46:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <DHT11_Read+0x94>)
 8000b48:	f002 f9be 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f7      	beq.n	8000b42 <DHT11_Read+0xe>
		DWT_Delay_us(40);
 8000b52:	2028      	movs	r0, #40	@ 0x28
 8000b54:	f7ff ff0e 	bl	8000974 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000b58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5c:	481a      	ldr	r0, [pc, #104]	@ (8000bc8 <DHT11_Read+0x94>)
 8000b5e:	f002 f9b3 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10e      	bne.n	8000b86 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2201      	movs	r2, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25a      	sxtb	r2, r3
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e00b      	b.n	8000b9e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	f1c3 0307 	rsb	r3, r3, #7
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	b25a      	sxtb	r2, r3
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000b9e:	bf00      	nop
 8000ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba4:	4808      	ldr	r0, [pc, #32]	@ (8000bc8 <DHT11_Read+0x94>)
 8000ba6:	f002 f98f 	bl	8002ec8 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f7      	bne.n	8000ba0 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d9c1      	bls.n	8000b40 <DHT11_Read+0xc>
	}
	return i;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020800 	.word	0x40020800

08000bcc <DHT11_readData>:

DHT11_TypeDef DHT11_readData()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000bd4:	f7ff ff44 	bl	8000a60 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000bd8:	f7ff ff7e 	bl	8000ad8 <DHT11_Check_Response>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8000be0:	f7ff ffa8 	bl	8000b34 <DHT11_Read>
 8000be4:	4603      	mov	r3, r0
 8000be6:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000be8:	f7ff ffa4 	bl	8000b34 <DHT11_Read>
 8000bec:	4603      	mov	r3, r0
 8000bee:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 8000bf0:	f7ff ffa0 	bl	8000b34 <DHT11_Read>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000bf8:	f7ff ff9c 	bl	8000b34 <DHT11_Read>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 8000c00:	f7ff ff98 	bl	8000b34 <DHT11_Read>
 8000c04:	4603      	mov	r3, r0
 8000c06:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000c08:	f7ff ff54 	bl	8000ab4 <DHT11_Stop>
	return dht11;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	6010      	str	r0, [r2, #0]
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	8093      	strh	r3, [r2, #4]
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f005 f9a0 	bl	8005f84 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000c44:	f240 4202 	movw	r2, #1026	@ 0x402
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4827      	ldr	r0, [pc, #156]	@ (8000ce8 <esp_at_command+0xc4>)
 8000c4c:	f005 f99a 	bl	8005f84 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff facf 	bl	80001f4 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	2364      	movs	r3, #100	@ 0x64
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	4823      	ldr	r0, [pc, #140]	@ (8000cec <esp_at_command+0xc8>)
 8000c60:	f003 ff58 	bl	8004b14 <HAL_UART_Transmit>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d031      	beq.n	8000cce <esp_at_command+0xaa>
        return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e037      	b.n	8000ce0 <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <esp_at_command+0xc4>)
 8000c72:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c7a:	d302      	bcc.n	8000c82 <esp_at_command+0x5e>
            return -2;
 8000c7c:	f06f 0301 	mvn.w	r3, #1
 8000c80:	e02e      	b.n	8000ce0 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000c82:	491b      	ldr	r1, [pc, #108]	@ (8000cf0 <esp_at_command+0xcc>)
 8000c84:	4818      	ldr	r0, [pc, #96]	@ (8000ce8 <esp_at_command+0xc4>)
 8000c86:	f005 f9ef 	bl	8006068 <strstr>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <esp_at_command+0x72>
            return -3;
 8000c90:	f06f 0302 	mvn.w	r3, #2
 8000c94:	e024      	b.n	8000ce0 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000c96:	4917      	ldr	r1, [pc, #92]	@ (8000cf4 <esp_at_command+0xd0>)
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <esp_at_command+0xc4>)
 8000c9a:	f005 f9e5 	bl	8006068 <strstr>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00d      	beq.n	8000cc0 <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <esp_at_command+0xc4>)
 8000ca6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000caa:	461a      	mov	r2, r3
 8000cac:	490e      	ldr	r1, [pc, #56]	@ (8000ce8 <esp_at_command+0xc4>)
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	f005 fa6b 	bl	800618a <memcpy>
            *length = cb_data.length;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <esp_at_command+0xc4>)
 8000cb6:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	801a      	strh	r2, [r3, #0]

            break;
 8000cbe:	e00a      	b.n	8000cd6 <esp_at_command+0xb2>
        }

        time_out -= 10;
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	3b0a      	subs	r3, #10
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f001 f9bf 	bl	800204c <HAL_Delay>
    while(time_out > 0)
 8000cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dccc      	bgt.n	8000c70 <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cda:	f001 f9b7 	bl	800204c <HAL_Delay>
    return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000051c 	.word	0x2000051c
 8000cec:	20000920 	.word	0x20000920
 8000cf0:	08007090 	.word	0x08007090
 8000cf4:	08007098 	.word	0x08007098

08000cf8 <esp_reset>:

static int esp_reset(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000d02:	1dba      	adds	r2, r7, #6
 8000d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d08:	490a      	ldr	r1, [pc, #40]	@ (8000d34 <esp_reset+0x3c>)
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <esp_reset+0x40>)
 8000d0c:	f7ff ff8a 	bl	8000c24 <esp_at_command>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <esp_reset+0x24>
    {
       return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e007      	b.n	8000d2c <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000d1c:	1dba      	adds	r2, r7, #6
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	4904      	ldr	r1, [pc, #16]	@ (8000d34 <esp_reset+0x3c>)
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <esp_reset+0x44>)
 8000d26:	f7ff ff7d 	bl	8000c24 <esp_at_command>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000009c 	.word	0x2000009c
 8000d38:	0800709c 	.word	0x0800709c
 8000d3c:	080070a8 	.word	0x080070a8

08000d40 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000d4e:	f107 020a 	add.w	r2, r7, #10
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	492d      	ldr	r1, [pc, #180]	@ (8000e0c <request_ip_addr+0xcc>)
 8000d58:	482d      	ldr	r0, [pc, #180]	@ (8000e10 <request_ip_addr+0xd0>)
 8000d5a:	f7ff ff63 	bl	8000c24 <esp_at_command>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000d64:	482b      	ldr	r0, [pc, #172]	@ (8000e14 <request_ip_addr+0xd4>)
 8000d66:	f005 f80d 	bl	8005d84 <puts>
 8000d6a:	e049      	b.n	8000e00 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000d6c:	492a      	ldr	r1, [pc, #168]	@ (8000e18 <request_ip_addr+0xd8>)
 8000d6e:	4827      	ldr	r0, [pc, #156]	@ (8000e0c <request_ip_addr+0xcc>)
 8000d70:	f005 f91e 	bl	8005fb0 <strtok>
 8000d74:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d03e      	beq.n	8000dfa <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e009      	b.n	8000d96 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000d82:	4a22      	ldr	r2, [pc, #136]	@ (8000e0c <request_ip_addr+0xcc>)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 ff9c 	bl	8005cc8 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	3301      	adds	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	dbf0      	blt.n	8000d82 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000da0:	e02b      	b.n	8000dfa <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000da2:	491e      	ldr	r1, [pc, #120]	@ (8000e1c <request_ip_addr+0xdc>)
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f005 f95f 	bl	8006068 <strstr>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d01f      	beq.n	8000df0 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000db0:	491b      	ldr	r1, [pc, #108]	@ (8000e20 <request_ip_addr+0xe0>)
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f005 f8fc 	bl	8005fb0 <strtok>
                ip = strtok(NULL, "\"");
 8000db8:	4919      	ldr	r1, [pc, #100]	@ (8000e20 <request_ip_addr+0xe0>)
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f005 f8f8 	bl	8005fb0 <strtok>
 8000dc0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000dc2:	4918      	ldr	r1, [pc, #96]	@ (8000e24 <request_ip_addr+0xe4>)
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fa0b 	bl	80001e0 <strcmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00f      	beq.n	8000df0 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4814      	ldr	r0, [pc, #80]	@ (8000e28 <request_ip_addr+0xe8>)
 8000dd6:	f005 f8d5 	bl	8005f84 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fa0a 	bl	80001f4 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	68f9      	ldr	r1, [r7, #12]
 8000de6:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <request_ip_addr+0xe8>)
 8000de8:	f005 f9cf 	bl	800618a <memcpy>
                    return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e009      	b.n	8000e04 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000df0:	4909      	ldr	r1, [pc, #36]	@ (8000e18 <request_ip_addr+0xd8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f005 f8dc 	bl	8005fb0 <strtok>
 8000df8:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1d0      	bne.n	8000da2 <request_ip_addr+0x62>
        }
    }

    return -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000009c 	.word	0x2000009c
 8000e10:	080070ec 	.word	0x080070ec
 8000e14:	080070f8 	.word	0x080070f8
 8000e18:	080070e0 	.word	0x080070e0
 8000e1c:	08007118 	.word	0x08007118
 8000e20:	080070e8 	.word	0x080070e8
 8000e24:	080070b0 	.word	0x080070b0
 8000e28:	2000008c 	.word	0x2000008c

08000e2c <esp_client_conn>:
int esp_client_conn()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b092      	sub	sp, #72	@ 0x48
 8000e30:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	223c      	movs	r2, #60	@ 0x3c
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 f8a0 	bl	8005f84 <memset>
  uint16_t length = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000e48:	f107 0008 	add.w	r0, r7, #8
 8000e4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e50:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <esp_client_conn+0x4c>)
 8000e52:	490a      	ldr	r1, [pc, #40]	@ (8000e7c <esp_client_conn+0x50>)
 8000e54:	f004 ff9e 	bl	8005d94 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000e58:	1dba      	adds	r2, r7, #6
 8000e5a:	f107 0008 	add.w	r0, r7, #8
 8000e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e62:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <esp_client_conn+0x54>)
 8000e64:	f7ff fede 	bl	8000c24 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <esp_client_conn+0x58>)
 8000e6a:	f000 f95d 	bl	8001128 <esp_send_data>
	return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3748      	adds	r7, #72	@ 0x48
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	08007124 	.word	0x08007124
 8000e7c:	08007134 	.word	0x08007134
 8000e80:	2000009c 	.word	0x2000009c
 8000e84:	08007150 	.word	0x08007150

08000e88 <drv_esp_init>:

int drv_esp_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <drv_esp_init+0x68>)
 8000e8e:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <drv_esp_init+0x6c>)
 8000e90:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 38400;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <drv_esp_init+0x68>)
 8000e94:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e98:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <drv_esp_init+0x68>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <drv_esp_init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <drv_esp_init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <drv_esp_init+0x68>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <drv_esp_init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <drv_esp_init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 8000ebe:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <drv_esp_init+0x68>)
 8000ec0:	f003 fdd8 	bl	8004a74 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <drv_esp_init+0x48>
        return -1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e00c      	b.n	8000eea <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <drv_esp_init+0x70>)
 8000ed6:	f005 f855 	bl	8005f84 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <drv_esp_init+0x74>)
 8000ede:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <drv_esp_init+0x68>)
 8000ee0:	f003 fea3 	bl	8004c2a <HAL_UART_Receive_IT>

    return esp_reset();
 8000ee4:	f7ff ff08 	bl	8000cf8 <esp_reset>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000920 	.word	0x20000920
 8000ef4:	40011400 	.word	0x40011400
 8000ef8:	2000008c 	.word	0x2000008c
 8000efc:	2000051b 	.word	0x2000051b

08000f00 <reset_func>:
void reset_func()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000f04:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <reset_func+0x28>)
 8000f06:	f004 fecd 	bl	8005ca4 <iprintf>
	if(esp_reset() == 0)
 8000f0a:	f7ff fef5 	bl	8000cf8 <esp_reset>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <reset_func+0x1c>
			printf("OK\r\n");
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <reset_func+0x2c>)
 8000f16:	f004 ff35 	bl	8005d84 <puts>
	else
			printf("fail\r\n");
}
 8000f1a:	e002      	b.n	8000f22 <reset_func+0x22>
			printf("fail\r\n");
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <reset_func+0x30>)
 8000f1e:	f004 ff31 	bl	8005d84 <puts>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08007164 	.word	0x08007164
 8000f2c:	08007174 	.word	0x08007174
 8000f30:	08007178 	.word	0x08007178

08000f34 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	@ 0x58
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	223c      	movs	r2, #60	@ 0x3c
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 f817 	bl	8005f84 <memset>
  if(ssid == NULL || passwd == NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <ap_conn_func+0x2e>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000f62:	4832      	ldr	r0, [pc, #200]	@ (800102c <ap_conn_func+0xf8>)
 8000f64:	f004 ff0e 	bl	8005d84 <puts>
 8000f68:	e05c      	b.n	8001024 <ap_conn_func+0xf0>
      return;
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2240      	movs	r2, #64	@ 0x40
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 f806 	bl	8005f84 <memset>
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000f78:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000f7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f80:	492b      	ldr	r1, [pc, #172]	@ (8001030 <ap_conn_func+0xfc>)
 8000f82:	482c      	ldr	r0, [pc, #176]	@ (8001034 <ap_conn_func+0x100>)
 8000f84:	f7ff fe4e 	bl	8000c24 <esp_at_command>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <ap_conn_func+0x62>
      printf("Station mode fail\r\n");
 8000f8e:	482a      	ldr	r0, [pc, #168]	@ (8001038 <ap_conn_func+0x104>)
 8000f90:	f004 fef8 	bl	8005d84 <puts>
 8000f94:	e012      	b.n	8000fbc <ap_conn_func+0x88>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f9a:	e009      	b.n	8000fb0 <ap_conn_func+0x7c>
          printf("%c", response[i]);
 8000f9c:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <ap_conn_func+0xfc>)
 8000f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fe8f 	bl	8005cc8 <putchar>
      for(int i = 0 ; i < length ; i++)
 8000faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fac:	3301      	adds	r3, #1
 8000fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dbef      	blt.n	8000f9c <ap_conn_func+0x68>
  }
  memset(at_cmd, 0x00, sizeof(at_cmd));
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2240      	movs	r2, #64	@ 0x40
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 ffdd 	bl	8005f84 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000fca:	f107 000c 	add.w	r0, r7, #12
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	491a      	ldr	r1, [pc, #104]	@ (800103c <ap_conn_func+0x108>)
 8000fd4:	f004 fede 	bl	8005d94 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000fd8:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000fdc:	f107 000c 	add.w	r0, r7, #12
 8000fe0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000fe4:	4912      	ldr	r1, [pc, #72]	@ (8001030 <ap_conn_func+0xfc>)
 8000fe6:	f7ff fe1d 	bl	8000c24 <esp_at_command>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <ap_conn_func+0xca>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4812      	ldr	r0, [pc, #72]	@ (8001040 <ap_conn_func+0x10c>)
 8000ff8:	f004 fe54 	bl	8005ca4 <iprintf>
 8000ffc:	e012      	b.n	8001024 <ap_conn_func+0xf0>
  else
  {
      for(int i = 0 ; i < length ; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	653b      	str	r3, [r7, #80]	@ 0x50
 8001002:	e009      	b.n	8001018 <ap_conn_func+0xe4>
          printf("%c", response[i]);
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <ap_conn_func+0xfc>)
 8001006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fe5b 	bl	8005cc8 <putchar>
      for(int i = 0 ; i < length ; i++)
 8001012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001014:	3301      	adds	r3, #1
 8001016:	653b      	str	r3, [r7, #80]	@ 0x50
 8001018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800101c:	461a      	mov	r2, r3
 800101e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001020:	4293      	cmp	r3, r2
 8001022:	dbef      	blt.n	8001004 <ap_conn_func+0xd0>
  }
}
 8001024:	3758      	adds	r7, #88	@ 0x58
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	080071bc 	.word	0x080071bc
 8001030:	2000009c 	.word	0x2000009c
 8001034:	080071e8 	.word	0x080071e8
 8001038:	080071f8 	.word	0x080071f8
 800103c:	0800720c 	.word	0x0800720c
 8001040:	08007224 	.word	0x08007224

08001044 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a23      	ldr	r2, [pc, #140]	@ (80010e0 <HAL_UART_RxCpltCallback+0x9c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d117      	bne.n	8001086 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <HAL_UART_RxCpltCallback+0xa0>)
 8001058:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800105c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001060:	d20c      	bcs.n	800107c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <HAL_UART_RxCpltCallback+0xa0>)
 8001064:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	b291      	uxth	r1, r2
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_UART_RxCpltCallback+0xa0>)
 800106e:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8001072:	461a      	mov	r2, r3
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_RxCpltCallback+0xa4>)
 8001076:	7819      	ldrb	r1, [r3, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_UART_RxCpltCallback+0xa0>)
 800107a:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	491a      	ldr	r1, [pc, #104]	@ (80010e8 <HAL_UART_RxCpltCallback+0xa4>)
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f003 fdd2 	bl	8004c2a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <HAL_UART_RxCpltCallback+0xa8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d122      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <HAL_UART_RxCpltCallback+0xb0>)
 8001096:	7811      	ldrb	r1, [r2, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 800109a:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a15      	ldr	r2, [pc, #84]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b0d      	cmp	r3, #13
 80010a8:	d10b      	bne.n	80010c2 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_UART_RxCpltCallback+0xb8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e004      	b.n	80010cc <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_UART_RxCpltCallback+0xac>)
 80010ca:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	4909      	ldr	r1, [pc, #36]	@ (80010f4 <HAL_UART_RxCpltCallback+0xb0>)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f003 fdaa 	bl	8004c2a <HAL_UART_Receive_IT>
    }
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40011400 	.word	0x40011400
 80010e4:	2000051c 	.word	0x2000051c
 80010e8:	2000051b 	.word	0x2000051b
 80010ec:	40004400 	.word	0x40004400
 80010f0:	20000968 	.word	0x20000968
 80010f4:	2000051a 	.word	0x2000051a
 80010f8:	200004e8 	.word	0x200004e8
 80010fc:	200004e4 	.word	0x200004e4

08001100 <AiotClient_Init>:


void AiotClient_Init()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	reset_func();
 8001104:	f7ff fefc 	bl	8000f00 <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 8001108:	4905      	ldr	r1, [pc, #20]	@ (8001120 <AiotClient_Init+0x20>)
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <AiotClient_Init+0x24>)
 800110c:	f7ff ff12 	bl	8000f34 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fe15 	bl	8000d40 <request_ip_addr>
	esp_client_conn();
 8001116:	f7ff fe89 	bl	8000e2c <esp_client_conn>
//	ip_state_func();
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	080075fc 	.word	0x080075fc
 8001124:	08007590 	.word	0x08007590

08001128 <esp_send_data>:

void esp_send_data(char *data)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	223c      	movs	r2, #60	@ 0x3c
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f004 ff21 	bl	8005f84 <memset>
  uint16_t length = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff f854 	bl	80001f4 <strlen>
 800114c:	4602      	mov	r2, r0
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	490e      	ldr	r1, [pc, #56]	@ (800118c <esp_send_data+0x64>)
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fe1d 	bl	8005d94 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800115a:	f107 020e 	add.w	r2, r7, #14
 800115e:	f107 0010 	add.w	r0, r7, #16
 8001162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001166:	490a      	ldr	r1, [pc, #40]	@ (8001190 <esp_send_data+0x68>)
 8001168:	f7ff fd5c 	bl	8000c24 <esp_at_command>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001172:	f107 020e 	add.w	r2, r7, #14
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	4905      	ldr	r1, [pc, #20]	@ (8001190 <esp_send_data+0x68>)
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fd51 	bl	8000c24 <esp_at_command>
	}
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	08007608 	.word	0x08007608
 8001190:	2000009c 	.word	0x2000009c

08001194 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <drv_uart_init+0x58>)
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <drv_uart_init+0x5c>)
 800119c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <drv_uart_init+0x58>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <drv_uart_init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <drv_uart_init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <drv_uart_init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <drv_uart_init+0x58>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <drv_uart_init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <drv_uart_init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4808      	ldr	r0, [pc, #32]	@ (80011ec <drv_uart_init+0x58>)
 80011cc:	f003 fc52 	bl	8004a74 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <drv_uart_init+0x48>
        return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e005      	b.n	80011e8 <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80011dc:	2201      	movs	r2, #1
 80011de:	4905      	ldr	r1, [pc, #20]	@ (80011f4 <drv_uart_init+0x60>)
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <drv_uart_init+0x58>)
 80011e2:	f003 fd22 	bl	8004c2a <HAL_UART_Receive_IT>
    return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000049c 	.word	0x2000049c
 80011f0:	40004400 	.word	0x40004400
 80011f4:	2000051a 	.word	0x2000051a

080011f8 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001200:	1d39      	adds	r1, r7, #4
 8001202:	230a      	movs	r3, #10
 8001204:	2201      	movs	r2, #1
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <__io_putchar+0x2c>)
 8001208:	f003 fc84 	bl	8004b14 <HAL_UART_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <__io_putchar+0x1e>
        return ch;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	e001      	b.n	800121a <__io_putchar+0x22>
    return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000049c 	.word	0x2000049c

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
   int ret = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fe99 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f8df 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f000 fa21 	bl	8001680 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
//  MX_USART6_UART_Init();
  MX_I2C1_Init();
 800123e:	f000 f997 	bl	8001570 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001242:	f000 f9c3 	bl	80015cc <MX_TIM4_Init>
  MX_ADC1_Init();
 8001246:	f000 f941 	bl	80014cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 800124a:	f7ff ffa3 	bl	8001194 <drv_uart_init>
 800124e:	4602      	mov	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8001256:	f7ff fe17 	bl	8000e88 <drv_esp_init>
 800125a:	4602      	mov	r2, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4313      	orrs	r3, r2
 8001260:	607b      	str	r3, [r7, #4]
  if(ret != 0) Error_Handler();
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <main+0x44>
 8001268:	f000 fb58 	bl	800191c <Error_Handler>
  printf("Start main() - wifi\r\n");
 800126c:	482e      	ldr	r0, [pc, #184]	@ (8001328 <main+0x100>)
 800126e:	f004 fd89 	bl	8005d84 <puts>
  AiotClient_Init();
 8001272:	f7ff ff45 	bl	8001100 <AiotClient_Init>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001276:	2104      	movs	r1, #4
 8001278:	482c      	ldr	r0, [pc, #176]	@ (800132c <main+0x104>)
 800127a:	f002 ffdd 	bl	8004238 <HAL_TIM_PWM_Start>
//  HAL_UART_Receive_IT(&huart2, &rx2char,1);
//  HAL_UART_Receive_IT(&huart6, &btchar,1);
  DHT11_Init();
 800127e:	f7ff fbd7 	bl	8000a30 <DHT11_Init>
  LCD_init(&hi2c1);
 8001282:	482b      	ldr	r0, [pc, #172]	@ (8001330 <main+0x108>)
 8001284:	f7ff f9ea 	bl	800065c <LCD_init>

//  int todayOpenWindow = 2;
//  int openNum = 0;


  printf("start main() dht & cds & water\r\n");
 8001288:	482a      	ldr	r0, [pc, #168]	@ (8001334 <main+0x10c>)
 800128a:	f004 fd7b 	bl	8005d84 <puts>
  LCD_writeStringXY(0, 0, "hello lcd");
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <main+0x110>)
 8001290:	2100      	movs	r1, #0
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fb29 	bl	80008ea <LCD_writeStringXY>
//     }
//  }

  while (1)
  {
	  if (windowState) {
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <main+0x114>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <main+0xb0>
		  unsigned long endTime = (HAL_GetTick() - startTime) / 1000;
 80012a0:	f000 fec8 	bl	8002034 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <main+0x118>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <main+0x11c>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	099b      	lsrs	r3, r3, #6
 80012b4:	603b      	str	r3, [r7, #0]
	      if (endTime >= cnt) {
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <main+0x120>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4293      	cmp	r3, r2
 80012c0:	d30a      	bcc.n	80012d8 <main+0xb0>
	        windowState = false;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <main+0x114>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
	         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,2499);
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <main+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80012d0:	639a      	str	r2, [r3, #56]	@ 0x38
	         HAL_Delay(100);
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f000 feba 	bl	800204c <HAL_Delay>
	      }
	    }

   if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80012d8:	491c      	ldr	r1, [pc, #112]	@ (800134c <main+0x124>)
 80012da:	481d      	ldr	r0, [pc, #116]	@ (8001350 <main+0x128>)
 80012dc:	f004 fec4 	bl	8006068 <strstr>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01d      	beq.n	8001322 <main+0xfa>
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <main+0x128>)
 80012e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <main+0x128>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	2b0a      	cmp	r3, #10
 80012f4:	d115      	bne.n	8001322 <main+0xfa>
   {
      //?  ?  ?   ??  \r\n+IPD,15:[KSH_LIN]HELLO\n
      strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80012f6:	215b      	movs	r1, #91	@ 0x5b
 80012f8:	4815      	ldr	r0, [pc, #84]	@ (8001350 <main+0x128>)
 80012fa:	f004 fe4b 	bl	8005f94 <strchr>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <main+0x12c>)
 8001304:	f004 ff39 	bl	800617a <strcpy>
      memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001308:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800130c:	2100      	movs	r1, #0
 800130e:	4810      	ldr	r0, [pc, #64]	@ (8001350 <main+0x128>)
 8001310:	f004 fe38 	bl	8005f84 <memset>
      cb_data.length = 0;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <main+0x128>)
 8001316:	2200      	movs	r2, #0
 8001318:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
      esp_event(strBuff);
 800131c:	480d      	ldr	r0, [pc, #52]	@ (8001354 <main+0x12c>)
 800131e:	f000 fa1d 	bl	800175c <esp_event>
//     send(sock, buff, strlen(buff), 0);
//     printf("%s\r\n",buff);
//     LCD_writeStringXY(1, 0, buff);
//     HAL_Delay(10);

   Send_Sensor_Data_Periodic();
 8001322:	f000 f819 	bl	8001358 <Send_Sensor_Data_Periodic>
  {
 8001326:	e7b7      	b.n	8001298 <main+0x70>
 8001328:	08007618 	.word	0x08007618
 800132c:	20000a08 	.word	0x20000a08
 8001330:	200009b4 	.word	0x200009b4
 8001334:	08007630 	.word	0x08007630
 8001338:	08007650 	.word	0x08007650
 800133c:	20000a50 	.word	0x20000a50
 8001340:	20000a54 	.word	0x20000a54
 8001344:	10624dd3 	.word	0x10624dd3
 8001348:	20000a58 	.word	0x20000a58
 800134c:	0800765c 	.word	0x0800765c
 8001350:	2000051c 	.word	0x2000051c
 8001354:	20000a5c 	.word	0x20000a5c

08001358 <Send_Sensor_Data_Periodic>:
//    sprintf(at_cmd, "AT+CIPSEND=%d\r\n", strlen(data));
//    if (esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 1000) == 0) {
//        esp_at_command((uint8_t *)data, (uint8_t *)response, &length, 1000);
//    }
//}
void Send_Sensor_Data_Periodic() {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    static uint32_t last_time = 0;  // 마지막으로 실행한 시간 저장

    if (HAL_GetTick() - last_time >= 5000) {  // 5초(5000ms) 경과 여부 확인
 800135c:	f000 fe6a 	bl	8002034 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <Send_Sensor_Data_Periodic+0x2c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3287 	movw	r2, #4999	@ 0x1387
 800136c:	4293      	cmp	r3, r2
 800136e:	d906      	bls.n	800137e <Send_Sensor_Data_Periodic+0x26>
        last_time = HAL_GetTick();  // 현재 시간 업데이트
 8001370:	f000 fe60 	bl	8002034 <HAL_GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <Send_Sensor_Data_Periodic+0x2c>)
 8001378:	6013      	str	r3, [r2, #0]
        Send_Sensor_Data();  // 센서 데이터 전송
 800137a:	f000 f805 	bl	8001388 <Send_Sensor_Data>
    }
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000a9c 	.word	0x20000a9c

08001388 <Send_Sensor_Data>:


void Send_Sensor_Data() {
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b0a2      	sub	sp, #136	@ 0x88
 800138c:	af04      	add	r7, sp, #16
   CDS_Typedef cdsData;
   DHT11_TypeDef dht11Data;
   WATER_Typedef waterData;

   cdsData = CDS_readData();
 800138e:	f7ff f953 	bl	8000638 <CDS_readData>
 8001392:	4603      	mov	r3, r0
 8001394:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
   dht11Data = DHT11_readData();
 8001398:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc15 	bl	8000bcc <DHT11_readData>
   waterData = WATER_readData();
 80013a2:	f000 fdab 	bl	8001efc <WATER_readData>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

   char buff[100];
     sprintf(buff, "[KJW_SQL:SENSOR@%d@%d.%d@%d@%d\n]",
               cdsData.cds_value, dht11Data.temp_byte1, dht11Data.temp_byte2, dht11Data.rh_byte1, waterData.water_value);
 80013ac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
     sprintf(buff, "[KJW_SQL:SENSOR@%d@%d.%d@%d@%d\n]",
 80013b0:	461c      	mov	r4, r3
               cdsData.cds_value, dht11Data.temp_byte1, dht11Data.temp_byte2, dht11Data.rh_byte1, waterData.water_value);
 80013b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
     sprintf(buff, "[KJW_SQL:SENSOR@%d@%d.%d@%d@%d\n]",
 80013b6:	461d      	mov	r5, r3
               cdsData.cds_value, dht11Data.temp_byte1, dht11Data.temp_byte2, dht11Data.rh_byte1, waterData.water_value);
 80013b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80013bc:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80013c0:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
     sprintf(buff, "[KJW_SQL:SENSOR@%d@%d.%d@%d@%d\n]",
 80013c4:	1d38      	adds	r0, r7, #4
 80013c6:	9102      	str	r1, [sp, #8]
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	462b      	mov	r3, r5
 80013ce:	4622      	mov	r2, r4
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <Send_Sensor_Data+0x68>)
 80013d2:	f004 fcdf 	bl	8005d94 <siprintf>
//     sprintf(buff, "[STM:SENSOR@%d.%d@%d]\r\n",
//               dht11Data.temp_byte1, dht11Data.temp_byte2, dht11Data.rh_byte1);


    printf("전송할 데이터: %s\r\n", buff);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <Send_Sensor_Data+0x6c>)
 80013dc:	f004 fc62 	bl	8005ca4 <iprintf>

    // 데이터 전송
    esp_send_data(buff);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fea0 	bl	8001128 <esp_send_data>
//    esp_event(buff);
//    printf("전송 완료?\r\n");



}
 80013e8:	bf00      	nop
 80013ea:	3778      	adds	r7, #120	@ 0x78
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdb0      	pop	{r4, r5, r7, pc}
 80013f0:	08007664 	.word	0x08007664
 80013f4:	08007688 	.word	0x08007688

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	@ 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	@ 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fdbc 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a27      	ldr	r2, [pc, #156]	@ (80014c4 <SystemClock_Config+0xcc>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <SystemClock_Config+0xd0>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001468:	2308      	movs	r3, #8
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800146c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001470:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001472:	2304      	movs	r3, #4
 8001474:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001476:	2304      	movs	r3, #4
 8001478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4618      	mov	r0, r3
 8001480:	f002 f9f2 	bl	8003868 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800148a:	f000 fa47 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fc54 	bl	8003d58 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014b6:	f000 fa31 	bl	800191c <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	@ 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <MX_ADC1_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <MX_ADC1_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_ADC1_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <MX_ADC1_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_ADC1_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_ADC1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_ADC1_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <MX_ADC1_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_ADC1_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_ADC1_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <MX_ADC1_Init+0x98>)
 800152e:	f000 fdb1 	bl	8002094 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 f9f0 	bl	800191c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800153c:	2305      	movs	r3, #5
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_ADC1_Init+0x98>)
 800154e:	f000 ff65 	bl	800241c <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 f9e0 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000096c 	.word	0x2000096c
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_I2C1_Init+0x54>)
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <MX_I2C1_Init+0x58>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2C1_Init+0x54>)
 800157c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001580:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_I2C1_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_I2C1_Init+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <MX_I2C1_Init+0x54>)
 8001590:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001594:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_I2C1_Init+0x54>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_I2C1_Init+0x54>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <MX_I2C1_Init+0x54>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_I2C1_Init+0x54>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_I2C1_Init+0x54>)
 80015b0:	f001 fcbc 	bl	8002f2c <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015ba:	f000 f9af 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200009b4 	.word	0x200009b4
 80015c8:	40005400 	.word	0x40005400

080015cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ee:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_TIM4_Init+0xac>)
 80015f0:	4a22      	ldr	r2, [pc, #136]	@ (800167c <MX_TIM4_Init+0xb0>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <MX_TIM4_Init+0xac>)
 80015f6:	2253      	movs	r2, #83	@ 0x53
 80015f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_TIM4_Init+0xac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_TIM4_Init+0xac>)
 8001602:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001606:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_TIM4_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_TIM4_Init+0xac>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001614:	4818      	ldr	r0, [pc, #96]	@ (8001678 <MX_TIM4_Init+0xac>)
 8001616:	f002 fdbf 	bl	8004198 <HAL_TIM_PWM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001620:	f000 f97c 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4619      	mov	r1, r3
 8001632:	4811      	ldr	r0, [pc, #68]	@ (8001678 <MX_TIM4_Init+0xac>)
 8001634:	f003 f9b0 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800163e:	f000 f96d 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	@ 0x60
 8001644:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2204      	movs	r2, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	@ (8001678 <MX_TIM4_Init+0xac>)
 800165a:	f002 fe9d 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001664:	f000 f95a 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <MX_TIM4_Init+0xac>)
 800166a:	f000 fa33 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a08 	.word	0x20000a08
 800167c:	40000800 	.word	0x40000800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <MX_GPIO_Init+0xd4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a2d      	ldr	r2, [pc, #180]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_GPIO_Init+0xd4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <MX_GPIO_Init+0xd8>)
 800170e:	f001 fbf3 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001718:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <MX_GPIO_Init+0xd8>)
 800172a:	f001 fa49 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin TEST_LED_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|TEST_LED_Pin;
 800172e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_GPIO_Init+0xd8>)
 8001748:	f001 fa3a 	bl	8002bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40020800 	.word	0x40020800

0800175c <esp_event>:
//void MX_GPIO_TEST_LED_OFF(int pin)
//{
//   HAL_GPIO_WritePin(TEST_LED_GPIO_Port, pin, GPIO_PIN_RESET);
//}
void esp_event(char * recvBuf)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ae      	sub	sp, #184	@ 0xb8
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
  int i=0;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char * pToken;
  char * pArray[ARR_CNT]={0};
 800176a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 800177e:	2300      	movs	r3, #0
 8001780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001782:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001786:	223c      	movs	r2, #60	@ 0x3c
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fbfa 	bl	8005f84 <memset>
  char tempBuf[MAX_UART_COMMAND_LEN]={0};
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	223c      	movs	r2, #60	@ 0x3c
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fbf1 	bl	8005f84 <memset>

   recvBuf[strlen(recvBuf)-1] = '\0';   //'\n' cut
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fd26 	bl	80001f4 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	3b01      	subs	r3, #1
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
   printf("\r\nDebug recv : %s\r\n",recvBuf);
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	484b      	ldr	r0, [pc, #300]	@ (80018e4 <esp_event+0x188>)
 80017b8:	f004 fa74 	bl	8005ca4 <iprintf>


   strcpy(tempBuf, recvBuf);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 fcd9 	bl	800617a <strcpy>

   pToken = strtok(recvBuf,"[@]");
 80017c8:	4947      	ldr	r1, [pc, #284]	@ (80018e8 <esp_event+0x18c>)
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f004 fbf0 	bl	8005fb0 <strtok>
 80017d0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
   while(pToken != NULL)
 80017d4:	e017      	b.n	8001806 <esp_event+0xaa>
   {
     pArray[i] = pToken;
 80017d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	33b0      	adds	r3, #176	@ 0xb0
 80017de:	443b      	add	r3, r7
 80017e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80017e4:	f843 2c24 	str.w	r2, [r3, #-36]
     if(++i >= ARR_CNT)
 80017e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80017f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	dc0a      	bgt.n	8001810 <esp_event+0xb4>
       break;
     pToken = strtok(NULL,"[@]");
 80017fa:	493b      	ldr	r1, [pc, #236]	@ (80018e8 <esp_event+0x18c>)
 80017fc:	2000      	movs	r0, #0
 80017fe:	f004 fbd7 	bl	8005fb0 <strtok>
 8001802:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
   while(pToken != NULL)
 8001806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e3      	bne.n	80017d6 <esp_event+0x7a>
 800180e:	e000      	b.n	8001812 <esp_event+0xb6>
       break;
 8001810:	bf00      	nop
//            MX_GPIO_LED_OFF(LD2_Pin);
//      }
//      sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
//  }

  if(!strcmp(pArray[1],"WINDOW"))
 8001812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001816:	4935      	ldr	r1, [pc, #212]	@ (80018ec <esp_event+0x190>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fce1 	bl	80001e0 <strcmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d150      	bne.n	80018c6 <esp_event+0x16a>
  {
	     if(!strcmp(pArray[2],"OPEN"))
 8001824:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001828:	4931      	ldr	r1, [pc, #196]	@ (80018f0 <esp_event+0x194>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fcd8 	bl	80001e0 <strcmp>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d129      	bne.n	800188a <esp_event+0x12e>
	     {
	    	 printf("open");
 8001836:	482f      	ldr	r0, [pc, #188]	@ (80018f4 <esp_event+0x198>)
 8001838:	f004 fa34 	bl	8005ca4 <iprintf>
	    	 windowState = true;
 800183c:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <esp_event+0x19c>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
	    	 startTime = HAL_GetTick();
 8001842:	f000 fbf7 	bl	8002034 <HAL_GetTick>
 8001846:	4603      	mov	r3, r0
 8001848:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <esp_event+0x1a0>)
 800184a:	6013      	str	r3, [r2, #0]

	         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,1800);
 800184c:	4b2c      	ldr	r3, [pc, #176]	@ (8001900 <esp_event+0x1a4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001854:	639a      	str	r2, [r3, #56]	@ 0x38

	         if(!strcmp(pArray[3],"DAY"))
 8001856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800185a:	492a      	ldr	r1, [pc, #168]	@ (8001904 <esp_event+0x1a8>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fcbf 	bl	80001e0 <strcmp>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <esp_event+0x114>
	         {
	        	 cnt = 5;
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <esp_event+0x1ac>)
 800186a:	2205      	movs	r2, #5
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e01d      	b.n	80018ac <esp_event+0x150>
	         }
	         else if(!strcmp(pArray[3],"NIGHT"))
 8001870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001874:	4925      	ldr	r1, [pc, #148]	@ (800190c <esp_event+0x1b0>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcb2 	bl	80001e0 <strcmp>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d114      	bne.n	80018ac <esp_event+0x150>
	         {
	        	 cnt = 5;
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <esp_event+0x1ac>)
 8001884:	2205      	movs	r2, #5
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e010      	b.n	80018ac <esp_event+0x150>
	         }
	     }
	     else if(!strcmp(pArray[2],"CLOSE"))
 800188a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800188e:	4920      	ldr	r1, [pc, #128]	@ (8001910 <esp_event+0x1b4>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fca5 	bl	80001e0 <strcmp>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <esp_event+0x150>
	     {
        	 windowState = false;
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <esp_event+0x19c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
	         __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,2499);
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <esp_event+0x1a4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80018aa:	639a      	str	r2, [r3, #56]	@ 0x38
	     }
      sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80018ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80018b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80018b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80018b8:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	460b      	mov	r3, r1
 80018c0:	4914      	ldr	r1, [pc, #80]	@ (8001914 <esp_event+0x1b8>)
 80018c2:	f004 fa67 	bl	8005d94 <siprintf>
//      return;
//  }
//  else
//      return;

  esp_send_data(sendBuf);
 80018c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc2c 	bl	8001128 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 80018d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4810      	ldr	r0, [pc, #64]	@ (8001918 <esp_event+0x1bc>)
 80018d8:	f004 f9e4 	bl	8005ca4 <iprintf>
}
 80018dc:	bf00      	nop
 80018de:	37b0      	adds	r7, #176	@ 0xb0
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	080076a4 	.word	0x080076a4
 80018e8:	080076b8 	.word	0x080076b8
 80018ec:	080076bc 	.word	0x080076bc
 80018f0:	080076c4 	.word	0x080076c4
 80018f4:	080076cc 	.word	0x080076cc
 80018f8:	20000a50 	.word	0x20000a50
 80018fc:	20000a54 	.word	0x20000a54
 8001900:	20000a08 	.word	0x20000a08
 8001904:	080076d4 	.word	0x080076d4
 8001908:	20000a58 	.word	0x20000a58
 800190c:	080076d8 	.word	0x080076d8
 8001910:	080076e0 	.word	0x080076e0
 8001914:	080076e8 	.word	0x080076e8
 8001918:	080076f4 	.word	0x080076f4

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <Error_Handler+0x8>

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a0f      	ldr	r2, [pc, #60]	@ (8001974 <HAL_MspInit+0x4c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001966:	2007      	movs	r0, #7
 8001968:	f001 f856 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <HAL_ADC_MspInit+0x7c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d127      	bne.n	80019ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	4a15      	ldr	r2, [pc, #84]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_ADC_MspInit+0x80>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = WATER_Pin|CDS_Pin;
 80019d2:	2330      	movs	r3, #48	@ 0x30
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d6:	2303      	movs	r3, #3
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <HAL_ADC_MspInit+0x84>)
 80019e6:	f001 f8eb 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	@ 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000

08001a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_I2C_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12c      	bne.n	8001a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a50:	2304      	movs	r3, #4
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <HAL_I2C_MspInit+0x8c>)
 8001a5c:	f001 f8b0 	bl	8002bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x40>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x40>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11d      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001b2e:	f001 f847 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	@ 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3a      	ldr	r2, [pc, #232]	@ (8001c50 <HAL_UART_MspInit+0x108>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d134      	bne.n	8001bd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4b39      	ldr	r3, [pc, #228]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a31      	ldr	r2, [pc, #196]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4826      	ldr	r0, [pc, #152]	@ (8001c58 <HAL_UART_MspInit+0x110>)
 8001bbe:	f000 ffff 	bl	8002bc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2026      	movs	r0, #38	@ 0x26
 8001bc8:	f000 ff31 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bcc:	2026      	movs	r0, #38	@ 0x26
 8001bce:	f000 ff4a 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bd2:	e038      	b.n	8001c46 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a20      	ldr	r2, [pc, #128]	@ (8001c5c <HAL_UART_MspInit+0x114>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d133      	bne.n	8001c46 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_UART_MspInit+0x10c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c16:	23c0      	movs	r3, #192	@ 0xc0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c26:	2308      	movs	r3, #8
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <HAL_UART_MspInit+0x118>)
 8001c32:	f000 ffc5 	bl	8002bc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2047      	movs	r0, #71	@ 0x47
 8001c3c:	f000 fef7 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c40:	2047      	movs	r0, #71	@ 0x47
 8001c42:	f000 ff10 	bl	8002a66 <HAL_NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40011400 	.word	0x40011400
 8001c60:	40020800 	.word	0x40020800

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <NMI_Handler+0x4>

08001c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 f9a7 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART2_IRQHandler+0x10>)
 8001cca:	f002 ffd3 	bl	8004c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000049c 	.word	0x2000049c

08001cd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <USART6_IRQHandler+0x10>)
 8001cde:	f002 ffc9 	bl	8004c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000920 	.word	0x20000920

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d06:	f004 fa0b 	bl	8006120 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <_exit+0x12>

08001d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e00a      	b.n	8001d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d44:	f3af 8000 	nop.w
 8001d48:	4601      	mov	r1, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf0      	blt.n	8001d44 <_read+0x12>
  }

  return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e009      	b.n	8001d92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa36 	bl	80011f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf1      	blt.n	8001d7e <_write+0x12>
  }
  return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_close>:

int _close(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_isatty>:

int _isatty(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f004 f970 	bl	8006120 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20020000 	.word	0x20020000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	20000aa0 	.word	0x20000aa0
 8001e74:	20000bf8 	.word	0x20000bf8

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <WATER_Read>:

#include "water.h"

uint16_t WATER_Read (void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]

    // ADC1을 PA4 (Water)용 채널 4로 설정
    sConfig.Channel = ADC_CHANNEL_4;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	607b      	str	r3, [r7, #4]
    sConfig.Rank = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480e      	ldr	r0, [pc, #56]	@ (8001ef8 <WATER_Read+0x5c>)
 8001ec0:	f000 faac 	bl	800241c <HAL_ADC_ConfigChannel>

    // ADC 변환 시작
    HAL_ADC_Start(&hadc1);
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <WATER_Read+0x5c>)
 8001ec6:	f000 f929 	bl	800211c <HAL_ADC_Start>

    // 변환 완료 대기
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001eca:	2164      	movs	r1, #100	@ 0x64
 8001ecc:	480a      	ldr	r0, [pc, #40]	@ (8001ef8 <WATER_Read+0x5c>)
 8001ece:	f000 fa0c 	bl	80022ea <HAL_ADC_PollForConversion>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <WATER_Read+0x50>
    {
        // 변환 값 읽기
        uint16_t waterAdc = HAL_ADC_GetValue(&hadc1);
 8001ed8:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <WATER_Read+0x5c>)
 8001eda:	f000 fa91 	bl	8002400 <HAL_ADC_GetValue>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	82fb      	strh	r3, [r7, #22]
        HAL_ADC_Stop(&hadc1);  // ADC 변환 정지
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <WATER_Read+0x5c>)
 8001ee4:	f000 f9ce 	bl	8002284 <HAL_ADC_Stop>
        return waterAdc;
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	e000      	b.n	8001eee <WATER_Read+0x52>
    }
    return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000096c 	.word	0x2000096c

08001efc <WATER_readData>:

WATER_Typedef WATER_readData()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	WATER_Typedef water;
	water.water_value = WATER_Read();
 8001f02:	f7ff ffcb 	bl	8001e9c <WATER_Read>
 8001f06:	4603      	mov	r3, r0
 8001f08:	80bb      	strh	r3, [r7, #4]
	return water;
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f18:	f7ff ffae 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f004 f8f3 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff f96f 	bl	8001228 <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f58:	08007810 	.word	0x08007810
  ldr r2, =_sbss
 8001f5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f60:	20000bf4 	.word	0x20000bf4

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_Init+0x40>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_Init+0x40>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 fd41 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fcc4 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fd59 	bl	8002a82 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 fd21 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000000 	.word	0x20000000
 8002004:	20000008 	.word	0x20000008
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]

}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	20000aa4 	.word	0x20000aa4

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000aa4 	.word	0x20000aa4

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e033      	b.n	8002112 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fc60 	bl	8001978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 faca 	bl	8002680 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
 8002102:	e001      	b.n	8002108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start+0x1a>
 8002132:	2302      	movs	r3, #2
 8002134:	e097      	b.n	8002266 <HAL_ADC_Start+0x14a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d018      	beq.n	800217e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215c:	4b45      	ldr	r3, [pc, #276]	@ (8002274 <HAL_ADC_Start+0x158>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a45      	ldr	r2, [pc, #276]	@ (8002278 <HAL_ADC_Start+0x15c>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9a      	lsrs	r2, r3, #18
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002170:	e002      	b.n	8002178 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d15f      	bne.n	800224c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ca:	d106      	bne.n	80021da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d0:	f023 0206 	bic.w	r2, r3, #6
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_ADC_Start+0x160>)
 80021ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d129      	bne.n	8002264 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e020      	b.n	8002264 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	@ (8002280 <HAL_ADC_Start+0x164>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11b      	bne.n	8002264 <HAL_ADC_Start+0x148>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	e00b      	b.n	8002264 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000
 8002278:	431bde83 	.word	0x431bde83
 800227c:	40012300 	.word	0x40012300
 8002280:	40012000 	.word	0x40012000

08002284 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_Stop+0x16>
 8002296:	2302      	movs	r3, #2
 8002298:	e021      	b.n	80022de <HAL_ADC_Stop+0x5a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d113      	bne.n	8002330 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002316:	d10b      	bne.n	8002330 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e063      	b.n	80023f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff fe80 	bl	8002034 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002336:	e021      	b.n	800237c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d01d      	beq.n	800237c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_ADC_PollForConversion+0x6c>
 8002346:	f7ff fe75 	bl	8002034 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d212      	bcs.n	800237c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d00b      	beq.n	800237c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e03d      	b.n	80023f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d1d6      	bne.n	8002338 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0212 	mvn.w	r2, #18
 8002392:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d123      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d111      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1c>
 8002434:	2302      	movs	r3, #2
 8002436:	e113      	b.n	8002660 <HAL_ADC_ConfigChannel+0x244>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d925      	bls.n	8002494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	2207      	movs	r2, #7
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43da      	mvns	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	400a      	ands	r2, r1
 800246c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	4603      	mov	r3, r0
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4403      	add	r3, r0
 8002486:	3b1e      	subs	r3, #30
 8002488:	409a      	lsls	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	e022      	b.n	80024da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	2207      	movs	r2, #7
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4403      	add	r3, r0
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d824      	bhi.n	800252c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b05      	subs	r3, #5
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	400a      	ands	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b05      	subs	r3, #5
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34
 800252a:	e04c      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d824      	bhi.n	800257e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b23      	subs	r3, #35	@ 0x23
 8002546:	221f      	movs	r2, #31
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b23      	subs	r3, #35	@ 0x23
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
 800257c:	e023      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	3b41      	subs	r3, #65	@ 0x41
 8002590:	221f      	movs	r2, #31
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	@ 0x41
 80025ba:	fa00 f203 	lsl.w	r2, r0, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <HAL_ADC_ConfigChannel+0x250>)
 80025c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_ADC_ConfigChannel+0x254>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d10f      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1d8>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b12      	cmp	r3, #18
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_ADC_ConfigChannel+0x254>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_ADC_ConfigChannel+0x258>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d003      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x1f4>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b11      	cmp	r3, #17
 800260e:	d122      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_ADC_ConfigChannel+0x258>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_ADC_ConfigChannel+0x25c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_ADC_ConfigChannel+0x260>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0c9a      	lsrs	r2, r3, #18
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002648:	e002      	b.n	8002650 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3b01      	subs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012300 	.word	0x40012300
 8002670:	40012000 	.word	0x40012000
 8002674:	10000012 	.word	0x10000012
 8002678:	20000000 	.word	0x20000000
 800267c:	431bde83 	.word	0x431bde83

08002680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002688:	4b79      	ldr	r3, [pc, #484]	@ (8002870 <ADC_Init+0x1f0>)
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <ADC_Init+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e00f      	b.n	800277e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800276c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0202 	bic.w	r2, r2, #2
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7e1b      	ldrb	r3, [r3, #24]
 8002798:	005a      	lsls	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	035a      	lsls	r2, r3, #13
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	e007      	b.n	80027f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	3b01      	subs	r3, #1
 8002810:	051a      	lsls	r2, r3, #20
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002836:	025a      	lsls	r2, r3, #9
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	029a      	lsls	r2, r3, #10
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	0f000001 	.word	0x0f000001

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	@ (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff3e 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff31 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fac4 	bl	8002034 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d008      	beq.n	8002acc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2280      	movs	r2, #128	@ 0x80
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e052      	b.n	8002b72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0216 	bic.w	r2, r2, #22
 8002ada:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_DMA_Abort+0x62>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0208 	bic.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1c:	e013      	b.n	8002b46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1e:	f7ff fa89 	bl	8002034 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d90c      	bls.n	8002b46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e015      	b.n	8002b72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e4      	bne.n	8002b1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	223f      	movs	r2, #63	@ 0x3f
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e00c      	b.n	8002bb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e159      	b.n	8002e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8148 	bne.w	8002e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a2 	beq.w	8002e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d56:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a52      	ldr	r2, [pc, #328]	@ (8002eac <HAL_GPIO_Init+0x2ec>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a49      	ldr	r2, [pc, #292]	@ (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x202>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a48      	ldr	r2, [pc, #288]	@ (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x1fe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a47      	ldr	r2, [pc, #284]	@ (8002eb8 <HAL_GPIO_Init+0x2f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x1fa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a46      	ldr	r2, [pc, #280]	@ (8002ebc <HAL_GPIO_Init+0x2fc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x1f6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a45      	ldr	r2, [pc, #276]	@ (8002ec0 <HAL_GPIO_Init+0x300>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x1f2>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e008      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f002 0203 	and.w	r2, r2, #3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd4:	4935      	ldr	r1, [pc, #212]	@ (8002eac <HAL_GPIO_Init+0x2ec>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e30:	4a24      	ldr	r2, [pc, #144]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e36:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e60:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e84:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f aea2 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	@ 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e001      	b.n	8002eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e12b      	b.n	8003196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fd54 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f90:	f001 f8da 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a81      	ldr	r2, [pc, #516]	@ (80031a0 <HAL_I2C_Init+0x274>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d807      	bhi.n	8002fb0 <HAL_I2C_Init+0x84>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a80      	ldr	r2, [pc, #512]	@ (80031a4 <HAL_I2C_Init+0x278>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e006      	b.n	8002fbe <HAL_I2C_Init+0x92>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80031a8 <HAL_I2C_Init+0x27c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0e7      	b.n	8003196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a78      	ldr	r2, [pc, #480]	@ (80031ac <HAL_I2C_Init+0x280>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80031a0 <HAL_I2C_Init+0x274>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d802      	bhi.n	8003000 <HAL_I2C_Init+0xd4>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	e009      	b.n	8003014 <HAL_I2C_Init+0xe8>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	4a69      	ldr	r2, [pc, #420]	@ (80031b0 <HAL_I2C_Init+0x284>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003026:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	495c      	ldr	r1, [pc, #368]	@ (80031a0 <HAL_I2C_Init+0x274>)
 8003030:	428b      	cmp	r3, r1
 8003032:	d819      	bhi.n	8003068 <HAL_I2C_Init+0x13c>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e59      	subs	r1, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003042:	1c59      	adds	r1, r3, #1
 8003044:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003048:	400b      	ands	r3, r1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_I2C_Init+0x138>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e59      	subs	r1, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fbb1 f3f3 	udiv	r3, r1, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	e051      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003064:	2304      	movs	r3, #4
 8003066:	e04f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d111      	bne.n	8003094 <HAL_I2C_Init+0x168>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e012      	b.n	80030ba <HAL_I2C_Init+0x18e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Init+0x196>
 80030be:	2301      	movs	r3, #1
 80030c0:	e022      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <HAL_I2C_Init+0x1bc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e58      	subs	r0, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	440b      	add	r3, r1
 80030d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e58      	subs	r0, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	0099      	lsls	r1, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6911      	ldr	r1, [r2, #16]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	000186a0 	.word	0x000186a0
 80031a4:	001e847f 	.word	0x001e847f
 80031a8:	003d08ff 	.word	0x003d08ff
 80031ac:	431bde83 	.word	0x431bde83
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	461a      	mov	r2, r3
 80031c0:	460b      	mov	r3, r1
 80031c2:	817b      	strh	r3, [r7, #10]
 80031c4:	4613      	mov	r3, r2
 80031c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7fe ff34 	bl	8002034 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	f040 80e0 	bne.w	800339c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2319      	movs	r3, #25
 80031e2:	2201      	movs	r2, #1
 80031e4:	4970      	ldr	r1, [pc, #448]	@ (80033a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f964 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0d3      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_I2C_Master_Transmit+0x50>
 8003200:	2302      	movs	r3, #2
 8003202:	e0cc      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d007      	beq.n	800322a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003238:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2221      	movs	r2, #33	@ 0x21
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2210      	movs	r2, #16
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	893a      	ldrh	r2, [r7, #8]
 800325a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a50      	ldr	r2, [pc, #320]	@ (80033ac <HAL_I2C_Master_Transmit+0x1f8>)
 800326a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800326c:	8979      	ldrh	r1, [r7, #10]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f89c 	bl	80033b0 <I2C_MasterRequestWrite>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e08d      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003298:	e066      	b.n	8003368 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	6a39      	ldr	r1, [r7, #32]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fa22 	bl	80036e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d107      	bne.n	80032c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06b      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11b      	bne.n	800333c <HAL_I2C_Master_Transmit+0x188>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	6a39      	ldr	r1, [r7, #32]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa19 	bl	8003778 <I2C_WaitOnBTFFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	2b04      	cmp	r3, #4
 8003352:	d107      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003362:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e01a      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d194      	bne.n	800329a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	00100002 	.word	0x00100002
 80033ac:	ffff0000 	.word	0xffff0000

080033b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d006      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d003      	beq.n	80033da <I2C_MasterRequestWrite+0x2a>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033d8:	d108      	bne.n	80033ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e00b      	b.n	8003404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d107      	bne.n	8003404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f84f 	bl	80034b4 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342a:	d103      	bne.n	8003434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003432:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e035      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003440:	d108      	bne.n	8003454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e01b      	b.n	800348c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	11db      	asrs	r3, r3, #7
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f063 030f 	orn	r3, r3, #15
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	490e      	ldr	r1, [pc, #56]	@ (80034ac <I2C_MasterRequestWrite+0xfc>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f898 	bl	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e010      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4907      	ldr	r1, [pc, #28]	@ (80034b0 <I2C_MasterRequestWrite+0x100>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f888 	bl	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	00010008 	.word	0x00010008
 80034b0:	00010002 	.word	0x00010002

080034b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	e048      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d044      	beq.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ce:	f7fe fdb1 	bl	8002034 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d302      	bcc.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d139      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	0c1b      	lsrs	r3, r3, #16
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10d      	bne.n	800350a <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	43da      	mvns	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	e00c      	b.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x70>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	43da      	mvns	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	429a      	cmp	r2, r3
 8003528:	d116      	bne.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e023      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10d      	bne.n	800357e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	43da      	mvns	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	e00c      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	429a      	cmp	r2, r3
 800359c:	d093      	beq.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b6:	e071      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c6:	d123      	bne.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f043 0204 	orr.w	r2, r3, #4
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e067      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d041      	beq.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fd0c 	bl	8002034 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d136      	bne.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10c      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e00b      	b.n	800366a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e021      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10c      	bne.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e00b      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af6d 	bne.w	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f4:	e034      	b.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f886 	bl	8003808 <I2C_IsAcknowledgeFailed>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e034      	b.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d028      	beq.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fc91 	bl	8002034 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11d      	bne.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d016      	beq.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e007      	b.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b80      	cmp	r3, #128	@ 0x80
 800376c:	d1c3      	bne.n	80036f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f83e 	bl	8003808 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e034      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d028      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fc49 	bl	8002034 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d016      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d1c3      	bne.n	8003786 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381e:	d11b      	bne.n	8003858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	f043 0204 	orr.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003886:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fb88 	bl	8002034 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fb84 	bl	8002034 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fb74 	bl	8002034 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe fb70 	bl	8002034 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	@ 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800397e:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	@ (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fe fb29 	bl	8002034 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe fb25 	bl	8002034 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fb08 	bl	8002034 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe fb04 	bl	8002034 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	@ (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fae8 	bl	8002034 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe fae4 	bl	8002034 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fad1 	bl	8002034 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fe facd 	bl	8002034 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fa8d 	bl	8002034 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fa89 	bl	8002034 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fa4e 	bl	8002034 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fa4a 	bl	8002034 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fa38 	bl	8002034 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fa34 	bl	8002034 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fa08 	bl	8002034 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fa04 	bl	8002034 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe f9dd 	bl	8002034 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe f9d9 	bl	8002034 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f9c6 	bl	8002034 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe f9c2 	bl	8002034 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe f8f4 	bl	8002034 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe f8f0 	bl	8002034 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe f854 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08007708 	.word	0x08007708
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b094      	sub	sp, #80	@ 0x50
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b79      	ldr	r3, [pc, #484]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80e1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e0db      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b73      	ldr	r3, [pc, #460]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f5c:	e0db      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b73      	ldr	r3, [pc, #460]	@ (800412c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f62:	e0d8      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b6f      	ldr	r3, [pc, #444]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	6139      	str	r1, [r7, #16]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fdc:	4659      	mov	r1, fp
 8003fde:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	462b      	mov	r3, r5
 8004004:	eb49 0303 	adc.w	r3, r9, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004016:	4629      	mov	r1, r5
 8004018:	024b      	lsls	r3, r1, #9
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004020:	4621      	mov	r1, r4
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004034:	f7fc f93c 	bl	80002b0 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004040:	e058      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b38      	ldr	r3, [pc, #224]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	4618      	mov	r0, r3
 800404c:	4611      	mov	r1, r2
 800404e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
 8004058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4641      	mov	r1, r8
 8004076:	ebb2 0a01 	subs.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800408c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004094:	ebb2 040a 	subs.w	r4, r2, sl
 8004098:	eb63 050b 	sbc.w	r5, r3, fp
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	f7fc f8e2 	bl	80002b0 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004118:	4618      	mov	r0, r3
 800411a:	3750      	adds	r7, #80	@ 0x50
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08007718 	.word	0x08007718

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffdc 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08007718 	.word	0x08007718

08004198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fc66 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 f9a0 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_TIM_PWM_Start+0x24>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e022      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d109      	bne.n	8004276 <HAL_TIM_PWM_Start+0x3e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e015      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d109      	bne.n	8004290 <HAL_TIM_PWM_Start+0x58>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e008      	b.n	80042a2 <HAL_TIM_PWM_Start+0x6a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e068      	b.n	800437c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0x82>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b8:	e013      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0x92>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d8:	e003      	b.n	80042e2 <HAL_TIM_PWM_Start+0xaa>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb2e 	bl	800494c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_TIM_PWM_Start+0x14c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d107      	bne.n	800430a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <HAL_TIM_PWM_Start+0x14c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431c:	d013      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <HAL_TIM_PWM_Start+0x150>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a17      	ldr	r2, [pc, #92]	@ (800438c <HAL_TIM_PWM_Start+0x154>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <HAL_TIM_PWM_Start+0x158>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_PWM_Start+0x10e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <HAL_TIM_PWM_Start+0x15c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b06      	cmp	r3, #6
 8004356:	d010      	beq.n	800437a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	e007      	b.n	800437a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0ae      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	f200 809f 	bhi.w	8004504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043c6:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004505 	.word	0x08004505
 80043d4:	08004505 	.word	0x08004505
 80043d8:	08004505 	.word	0x08004505
 80043dc:	08004441 	.word	0x08004441
 80043e0:	08004505 	.word	0x08004505
 80043e4:	08004505 	.word	0x08004505
 80043e8:	08004505 	.word	0x08004505
 80043ec:	08004483 	.word	0x08004483
 80043f0:	08004505 	.word	0x08004505
 80043f4:	08004505 	.word	0x08004505
 80043f8:	08004505 	.word	0x08004505
 80043fc:	080044c3 	.word	0x080044c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f914 	bl	8004634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
      break;
 800443e:	e064      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f95a 	bl	8004700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	021a      	lsls	r2, r3, #8
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]
      break;
 8004480:	e043      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 f9a5 	bl	80047d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0208 	orr.w	r2, r2, #8
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0204 	bic.w	r2, r2, #4
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
      break;
 80044c0:	e023      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f9ef 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	021a      	lsls	r2, r3, #8
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	61da      	str	r2, [r3, #28]
      break;
 8004502:	e002      	b.n	800450a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a37      	ldr	r2, [pc, #220]	@ (800461c <TIM_Base_SetConfig+0x100>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a36      	ldr	r2, [pc, #216]	@ (8004620 <TIM_Base_SetConfig+0x104>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <TIM_Base_SetConfig+0x108>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2b      	ldr	r2, [pc, #172]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004574:	d017      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <TIM_Base_SetConfig+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <TIM_Base_SetConfig+0x104>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a26      	ldr	r2, [pc, #152]	@ (8004624 <TIM_Base_SetConfig+0x108>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a25      	ldr	r2, [pc, #148]	@ (8004628 <TIM_Base_SetConfig+0x10c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a24      	ldr	r2, [pc, #144]	@ (800462c <TIM_Base_SetConfig+0x110>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <TIM_Base_SetConfig+0x114>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a0e      	ldr	r2, [pc, #56]	@ (8004618 <TIM_Base_SetConfig+0xfc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]
  }
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 0201 	bic.w	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 0302 	bic.w	r3, r3, #2
 800467c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a1c      	ldr	r2, [pc, #112]	@ (80046fc <TIM_OC1_SetConfig+0xc8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10c      	bne.n	80046aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0308 	bic.w	r3, r3, #8
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 0304 	bic.w	r3, r3, #4
 80046a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a13      	ldr	r2, [pc, #76]	@ (80046fc <TIM_OC1_SetConfig+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d111      	bne.n	80046d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40010000 	.word	0x40010000

08004700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 0210 	bic.w	r2, r3, #16
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0320 	bic.w	r3, r3, #32
 800474a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <TIM_OC2_SetConfig+0xd4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10d      	bne.n	800477c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800477a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a15      	ldr	r2, [pc, #84]	@ (80047d4 <TIM_OC2_SetConfig+0xd4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d113      	bne.n	80047ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800478a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000

080047d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <TIM_OC3_SetConfig+0xd0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10d      	bne.n	8004852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a14      	ldr	r2, [pc, #80]	@ (80048a8 <TIM_OC3_SetConfig+0xd0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d113      	bne.n	8004882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	40010000 	.word	0x40010000

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <TIM_OC4_SetConfig+0x9c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000

0800494c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2201      	movs	r2, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e050      	b.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fc:	d013      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10c      	bne.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40014000 	.word	0x40014000

08004a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd f854 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	@ 0x24
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fdbd 	bl	8005638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d175      	bne.n	8004c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x2c>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e06e      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2221      	movs	r2, #33	@ 0x21
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fd fa6f 	bl	8002034 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6c:	d108      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b88:	e02e      	b.n	8004be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	@ 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fb1f 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03a      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e007      	b.n	8004bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1cb      	bne.n	8004b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	@ 0x40
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 faeb 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d112      	bne.n	8004c6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Receive_IT+0x26>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e00b      	b.n	8004c6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fb12 	bl	800528a <UART_Start_Receive_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	e000      	b.n	8004c6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b0ba      	sub	sp, #232	@ 0xe8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
 8004cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fbf2 	bl	80054bc <UART_Receive_IT>
      return;
 8004cd8:	e25b      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80de 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
 8004ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80d1 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0202 	orr.w	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
 8004d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 81f2 	beq.w	8005188 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fb7d 	bl	80054bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_UART_IRQHandler+0x17a>
 8004de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04f      	beq.n	8004e8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa85 	bl	80052fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d141      	bne.n	8004e86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1d9      	bne.n	8004e02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005054 <HAL_UART_IRQHandler+0x3e0>)
 8004e5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fe89 	bl	8002b7a <HAL_DMA_Abort_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	e00e      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f994 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e00a      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f990 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f98c 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e9a:	e175      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	bf00      	nop
    return;
 8004e9e:	e173      	b.n	8005188 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	f040 814f 	bne.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8148 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8141 	beq.w	8005148 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee6:	2b40      	cmp	r3, #64	@ 0x40
 8004ee8:	f040 80b6 	bne.w	8005058 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8145 	beq.w	800518c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	f080 813e 	bcs.w	800518c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f22:	f000 8088 	beq.w	8005036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1d9      	bne.n	8004f26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e1      	bne.n	8004f72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e3      	bne.n	8004fae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005018:	65ba      	str	r2, [r7, #88]	@ 0x58
 800501a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800501e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e3      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	4618      	mov	r0, r3
 8005032:	f7fd fd32 	bl	8002a9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005044:	b29b      	uxth	r3, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8b7 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005052:	e09b      	b.n	800518c <HAL_UART_IRQHandler+0x518>
 8005054:	080053c5 	.word	0x080053c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005060:	b29b      	uxth	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 808e 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8089 	beq.w	8005190 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	623b      	str	r3, [r7, #32]
   return(result);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050da:	633a      	str	r2, [r7, #48]	@ 0x30
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e3      	bne.n	80050b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005120:	61fa      	str	r2, [r7, #28]
 8005122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	617b      	str	r3, [r7, #20]
   return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e3      	bne.n	80050fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f83d 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005146:	e023      	b.n	8005190 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f943 	bl	80053ec <UART_Transmit_IT>
    return;
 8005166:	e014      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f983 	bl	800548c <UART_EndTransmit_IT>
    return;
 8005186:	e004      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
    return;
 8005188:	bf00      	nop
 800518a:	e002      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_UART_IRQHandler+0x51e>
      return;
 8005190:	bf00      	nop
  }
}
 8005192:	37e8      	adds	r7, #232	@ 0xe8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	e03b      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d037      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fc ff1f 	bl	8002034 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d302      	bcc.n	8005208 <UART_WaitOnFlagUntilTimeout+0x30>
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e03a      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b80      	cmp	r3, #128	@ 0x80
 800521e:	d020      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d01d      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d116      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f857 	bl	80052fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2208      	movs	r2, #8
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e00f      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d0b4      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2222      	movs	r2, #34	@ 0x22
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0220 	orr.w	r2, r2, #32
 80052ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052fe:	b480      	push	{r7}
 8005300:	b095      	sub	sp, #84	@ 0x54
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800531c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005326:	643a      	str	r2, [r7, #64]	@ 0x40
 8005328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800532c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	61fb      	str	r3, [r7, #28]
   return(result);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800535a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800535c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	2b01      	cmp	r3, #1
 8005374:	d119      	bne.n	80053aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	60bb      	str	r3, [r7, #8]
   return(result);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0310 	bic.w	r3, r3, #16
 800538c:	647b      	str	r3, [r7, #68]	@ 0x44
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005396:	61ba      	str	r2, [r7, #24]
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6979      	ldr	r1, [r7, #20]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053b8:	bf00      	nop
 80053ba:	3754      	adds	r7, #84	@ 0x54
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff fee4 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b21      	cmp	r3, #33	@ 0x21
 80053fe:	d13e      	bne.n	800547e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005408:	d114      	bne.n	8005434 <UART_Transmit_IT+0x48>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d110      	bne.n	8005434 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005426:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]
 8005432:	e008      	b.n	8005446 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6211      	str	r1, [r2, #32]
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29b      	uxth	r3, r3
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4619      	mov	r1, r3
 8005454:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005468:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005478:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fe73 	bl	8005198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	@ 0x30
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b22      	cmp	r3, #34	@ 0x22
 80054ce:	f040 80ae 	bne.w	800562e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054da:	d117      	bne.n	800550c <UART_Receive_IT+0x50>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	629a      	str	r2, [r3, #40]	@ 0x28
 800550a:	e026      	b.n	800555a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d007      	beq.n	8005530 <UART_Receive_IT+0x74>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <UART_Receive_IT+0x82>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e008      	b.n	8005550 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800554a:	b2da      	uxtb	r2, r3
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4619      	mov	r1, r3
 8005568:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800556a:	2b00      	cmp	r3, #0
 800556c:	d15d      	bne.n	800562a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0220 	bic.w	r2, r2, #32
 800557c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800558c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d135      	bne.n	8005620 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f023 0310 	bic.w	r3, r3, #16
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055da:	623a      	str	r2, [r7, #32]
 80055dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	69f9      	ldr	r1, [r7, #28]
 80055e0:	6a3a      	ldr	r2, [r7, #32]
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d10a      	bne.n	8005612 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fdd1 	bl	80051c0 <HAL_UARTEx_RxEventCallback>
 800561e:	e002      	b.n	8005626 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb fd0f 	bl	8001044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e002      	b.n	8005630 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	@ 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b0c0      	sub	sp, #256	@ 0x100
 800563e:	af00      	add	r7, sp, #0
 8005640:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	68d9      	ldr	r1, [r3, #12]
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	ea40 0301 	orr.w	r3, r0, r1
 8005660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005690:	f021 010c 	bic.w	r1, r1, #12
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800569e:	430b      	orrs	r3, r1
 80056a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	6999      	ldr	r1, [r3, #24]
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	ea40 0301 	orr.w	r3, r0, r1
 80056be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005904 <UART_SetConfig+0x2cc>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d005      	beq.n	80056d8 <UART_SetConfig+0xa0>
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005908 <UART_SetConfig+0x2d0>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d104      	bne.n	80056e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe fd4a 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80056dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056e0:	e003      	b.n	80056ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7fe fd31 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 80056e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f4:	f040 810c 	bne.w	8005910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005702:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800570a:	4622      	mov	r2, r4
 800570c:	462b      	mov	r3, r5
 800570e:	1891      	adds	r1, r2, r2
 8005710:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005712:	415b      	adcs	r3, r3
 8005714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800571a:	4621      	mov	r1, r4
 800571c:	eb12 0801 	adds.w	r8, r2, r1
 8005720:	4629      	mov	r1, r5
 8005722:	eb43 0901 	adc.w	r9, r3, r1
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	4623      	mov	r3, r4
 8005740:	eb18 0303 	adds.w	r3, r8, r3
 8005744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005748:	462b      	mov	r3, r5
 800574a:	eb49 0303 	adc.w	r3, r9, r3
 800574e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800575e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005766:	460b      	mov	r3, r1
 8005768:	18db      	adds	r3, r3, r3
 800576a:	653b      	str	r3, [r7, #80]	@ 0x50
 800576c:	4613      	mov	r3, r2
 800576e:	eb42 0303 	adc.w	r3, r2, r3
 8005772:	657b      	str	r3, [r7, #84]	@ 0x54
 8005774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800577c:	f7fa fd98 	bl	80002b0 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4b61      	ldr	r3, [pc, #388]	@ (800590c <UART_SetConfig+0x2d4>)
 8005786:	fba3 2302 	umull	r2, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	011c      	lsls	r4, r3, #4
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005798:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800579c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057a8:	415b      	adcs	r3, r3
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057b0:	4641      	mov	r1, r8
 80057b2:	eb12 0a01 	adds.w	sl, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0b01 	adc.w	fp, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d0:	4692      	mov	sl, r2
 80057d2:	469b      	mov	fp, r3
 80057d4:	4643      	mov	r3, r8
 80057d6:	eb1a 0303 	adds.w	r3, sl, r3
 80057da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057de:	464b      	mov	r3, r9
 80057e0:	eb4b 0303 	adc.w	r3, fp, r3
 80057e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057fc:	460b      	mov	r3, r1
 80057fe:	18db      	adds	r3, r3, r3
 8005800:	643b      	str	r3, [r7, #64]	@ 0x40
 8005802:	4613      	mov	r3, r2
 8005804:	eb42 0303 	adc.w	r3, r2, r3
 8005808:	647b      	str	r3, [r7, #68]	@ 0x44
 800580a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800580e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005812:	f7fa fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4611      	mov	r1, r2
 800581c:	4b3b      	ldr	r3, [pc, #236]	@ (800590c <UART_SetConfig+0x2d4>)
 800581e:	fba3 2301 	umull	r2, r3, r3, r1
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2264      	movs	r2, #100	@ 0x64
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	1acb      	subs	r3, r1, r3
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005832:	4b36      	ldr	r3, [pc, #216]	@ (800590c <UART_SetConfig+0x2d4>)
 8005834:	fba3 2302 	umull	r2, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005840:	441c      	add	r4, r3
 8005842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800584c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	1891      	adds	r1, r2, r2
 800585a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800585c:	415b      	adcs	r3, r3
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005864:	4641      	mov	r1, r8
 8005866:	1851      	adds	r1, r2, r1
 8005868:	6339      	str	r1, [r7, #48]	@ 0x30
 800586a:	4649      	mov	r1, r9
 800586c:	414b      	adcs	r3, r1
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800587c:	4659      	mov	r1, fp
 800587e:	00cb      	lsls	r3, r1, #3
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005886:	4651      	mov	r1, sl
 8005888:	00ca      	lsls	r2, r1, #3
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	4603      	mov	r3, r0
 8005890:	4642      	mov	r2, r8
 8005892:	189b      	adds	r3, r3, r2
 8005894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005898:	464b      	mov	r3, r9
 800589a:	460a      	mov	r2, r1
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058ce:	f7fa fcef 	bl	80002b0 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <UART_SetConfig+0x2d4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	@ 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	3332      	adds	r3, #50	@ 0x32
 80058ea:	4a08      	ldr	r2, [pc, #32]	@ (800590c <UART_SetConfig+0x2d4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0207 	and.w	r2, r3, #7
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4422      	add	r2, r4
 80058fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005900:	e106      	b.n	8005b10 <UART_SetConfig+0x4d8>
 8005902:	bf00      	nop
 8005904:	40011000 	.word	0x40011000
 8005908:	40011400 	.word	0x40011400
 800590c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800591a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800591e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005922:	4642      	mov	r2, r8
 8005924:	464b      	mov	r3, r9
 8005926:	1891      	adds	r1, r2, r2
 8005928:	6239      	str	r1, [r7, #32]
 800592a:	415b      	adcs	r3, r3
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
 800592e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005932:	4641      	mov	r1, r8
 8005934:	1854      	adds	r4, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0501 	adc.w	r5, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	00eb      	lsls	r3, r5, #3
 8005946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800594a:	00e2      	lsls	r2, r4, #3
 800594c:	4614      	mov	r4, r2
 800594e:	461d      	mov	r5, r3
 8005950:	4643      	mov	r3, r8
 8005952:	18e3      	adds	r3, r4, r3
 8005954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005958:	464b      	mov	r3, r9
 800595a:	eb45 0303 	adc.w	r3, r5, r3
 800595e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800596e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800597e:	4629      	mov	r1, r5
 8005980:	008b      	lsls	r3, r1, #2
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005988:	4621      	mov	r1, r4
 800598a:	008a      	lsls	r2, r1, #2
 800598c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005990:	f7fa fc8e 	bl	80002b0 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4b60      	ldr	r3, [pc, #384]	@ (8005b1c <UART_SetConfig+0x4e4>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011c      	lsls	r4, r3, #4
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	61b9      	str	r1, [r7, #24]
 80059bc:	415b      	adcs	r3, r3
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6139      	str	r1, [r7, #16]
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	008b      	lsls	r3, r1, #2
 8005a20:	4641      	mov	r1, r8
 8005a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a26:	4641      	mov	r1, r8
 8005a28:	008a      	lsls	r2, r1, #2
 8005a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a2e:	f7fa fc3f 	bl	80002b0 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	4b38      	ldr	r3, [pc, #224]	@ (8005b1c <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2264      	movs	r2, #100	@ 0x64
 8005a42:	fb02 f303 	mul.w	r3, r2, r3
 8005a46:	1acb      	subs	r3, r1, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	3332      	adds	r3, #50	@ 0x32
 8005a4c:	4a33      	ldr	r2, [pc, #204]	@ (8005b1c <UART_SetConfig+0x4e4>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a58:	441c      	add	r4, r3
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a62:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	415b      	adcs	r3, r3
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a78:	4641      	mov	r1, r8
 8005a7a:	1851      	adds	r1, r2, r1
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	4649      	mov	r1, r9
 8005a80:	414b      	adcs	r3, r1
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a90:	4659      	mov	r1, fp
 8005a92:	00cb      	lsls	r3, r1, #3
 8005a94:	4651      	mov	r1, sl
 8005a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	00ca      	lsls	r2, r1, #3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aaa:	464b      	mov	r3, r9
 8005aac:	460a      	mov	r2, r1
 8005aae:	eb42 0303 	adc.w	r3, r2, r3
 8005ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005abe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005acc:	4649      	mov	r1, r9
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	008a      	lsls	r2, r1, #2
 8005ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ade:	f7fa fbe7 	bl	80002b0 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <UART_SetConfig+0x4e4>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	@ 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	3332      	adds	r3, #50	@ 0x32
 8005afa:	4a08      	ldr	r2, [pc, #32]	@ (8005b1c <UART_SetConfig+0x4e4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4422      	add	r2, r4
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1c:	51eb851f 	.word	0x51eb851f

08005b20 <std>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	b510      	push	{r4, lr}
 8005b24:	4604      	mov	r4, r0
 8005b26:	e9c0 3300 	strd	r3, r3, [r0]
 8005b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b2e:	6083      	str	r3, [r0, #8]
 8005b30:	8181      	strh	r1, [r0, #12]
 8005b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b34:	81c2      	strh	r2, [r0, #14]
 8005b36:	6183      	str	r3, [r0, #24]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	305c      	adds	r0, #92	@ 0x5c
 8005b3e:	f000 fa21 	bl	8005f84 <memset>
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <std+0x58>)
 8005b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <std+0x5c>)
 8005b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <std+0x60>)
 8005b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <std+0x64>)
 8005b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <std+0x68>)
 8005b54:	6224      	str	r4, [r4, #32]
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d006      	beq.n	8005b68 <std+0x48>
 8005b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b5e:	4294      	cmp	r4, r2
 8005b60:	d002      	beq.n	8005b68 <std+0x48>
 8005b62:	33d0      	adds	r3, #208	@ 0xd0
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d105      	bne.n	8005b74 <std+0x54>
 8005b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	f000 bb00 	b.w	8006174 <__retarget_lock_init_recursive>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	08005dd5 	.word	0x08005dd5
 8005b7c:	08005df7 	.word	0x08005df7
 8005b80:	08005e2f 	.word	0x08005e2f
 8005b84:	08005e53 	.word	0x08005e53
 8005b88:	20000aa8 	.word	0x20000aa8

08005b8c <stdio_exit_handler>:
 8005b8c:	4a02      	ldr	r2, [pc, #8]	@ (8005b98 <stdio_exit_handler+0xc>)
 8005b8e:	4903      	ldr	r1, [pc, #12]	@ (8005b9c <stdio_exit_handler+0x10>)
 8005b90:	4803      	ldr	r0, [pc, #12]	@ (8005ba0 <stdio_exit_handler+0x14>)
 8005b92:	f000 b869 	b.w	8005c68 <_fwalk_sglue>
 8005b96:	bf00      	nop
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	08006d3d 	.word	0x08006d3d
 8005ba0:	2000001c 	.word	0x2000001c

08005ba4 <cleanup_stdio>:
 8005ba4:	6841      	ldr	r1, [r0, #4]
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <cleanup_stdio+0x34>)
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	b510      	push	{r4, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	d001      	beq.n	8005bb4 <cleanup_stdio+0x10>
 8005bb0:	f001 f8c4 	bl	8006d3c <_fflush_r>
 8005bb4:	68a1      	ldr	r1, [r4, #8]
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <cleanup_stdio+0x38>)
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <cleanup_stdio+0x1e>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f001 f8bd 	bl	8006d3c <_fflush_r>
 8005bc2:	68e1      	ldr	r1, [r4, #12]
 8005bc4:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <cleanup_stdio+0x3c>)
 8005bc6:	4299      	cmp	r1, r3
 8005bc8:	d004      	beq.n	8005bd4 <cleanup_stdio+0x30>
 8005bca:	4620      	mov	r0, r4
 8005bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd0:	f001 b8b4 	b.w	8006d3c <_fflush_r>
 8005bd4:	bd10      	pop	{r4, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000aa8 	.word	0x20000aa8
 8005bdc:	20000b10 	.word	0x20000b10
 8005be0:	20000b78 	.word	0x20000b78

08005be4 <global_stdio_init.part.0>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <global_stdio_init.part.0+0x30>)
 8005be8:	4c0b      	ldr	r4, [pc, #44]	@ (8005c18 <global_stdio_init.part.0+0x34>)
 8005bea:	4a0c      	ldr	r2, [pc, #48]	@ (8005c1c <global_stdio_init.part.0+0x38>)
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	f7ff ff94 	bl	8005b20 <std>
 8005bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2109      	movs	r1, #9
 8005c00:	f7ff ff8e 	bl	8005b20 <std>
 8005c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c08:	2202      	movs	r2, #2
 8005c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0e:	2112      	movs	r1, #18
 8005c10:	f7ff bf86 	b.w	8005b20 <std>
 8005c14:	20000be0 	.word	0x20000be0
 8005c18:	20000aa8 	.word	0x20000aa8
 8005c1c:	08005b8d 	.word	0x08005b8d

08005c20 <__sfp_lock_acquire>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__sfp_lock_acquire+0x8>)
 8005c22:	f000 baa8 	b.w	8006176 <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	20000be9 	.word	0x20000be9

08005c2c <__sfp_lock_release>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__sfp_lock_release+0x8>)
 8005c2e:	f000 baa3 	b.w	8006178 <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000be9 	.word	0x20000be9

08005c38 <__sinit>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	f7ff fff0 	bl	8005c20 <__sfp_lock_acquire>
 8005c40:	6a23      	ldr	r3, [r4, #32]
 8005c42:	b11b      	cbz	r3, 8005c4c <__sinit+0x14>
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c48:	f7ff bff0 	b.w	8005c2c <__sfp_lock_release>
 8005c4c:	4b04      	ldr	r3, [pc, #16]	@ (8005c60 <__sinit+0x28>)
 8005c4e:	6223      	str	r3, [r4, #32]
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <__sinit+0x2c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f5      	bne.n	8005c44 <__sinit+0xc>
 8005c58:	f7ff ffc4 	bl	8005be4 <global_stdio_init.part.0>
 8005c5c:	e7f2      	b.n	8005c44 <__sinit+0xc>
 8005c5e:	bf00      	nop
 8005c60:	08005ba5 	.word	0x08005ba5
 8005c64:	20000be0 	.word	0x20000be0

08005c68 <_fwalk_sglue>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	4688      	mov	r8, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	2600      	movs	r6, #0
 8005c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c78:	f1b9 0901 	subs.w	r9, r9, #1
 8005c7c:	d505      	bpl.n	8005c8a <_fwalk_sglue+0x22>
 8005c7e:	6824      	ldr	r4, [r4, #0]
 8005c80:	2c00      	cmp	r4, #0
 8005c82:	d1f7      	bne.n	8005c74 <_fwalk_sglue+0xc>
 8005c84:	4630      	mov	r0, r6
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d907      	bls.n	8005ca0 <_fwalk_sglue+0x38>
 8005c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c94:	3301      	adds	r3, #1
 8005c96:	d003      	beq.n	8005ca0 <_fwalk_sglue+0x38>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	4306      	orrs	r6, r0
 8005ca0:	3568      	adds	r5, #104	@ 0x68
 8005ca2:	e7e9      	b.n	8005c78 <_fwalk_sglue+0x10>

08005ca4 <iprintf>:
 8005ca4:	b40f      	push	{r0, r1, r2, r3}
 8005ca6:	b507      	push	{r0, r1, r2, lr}
 8005ca8:	4906      	ldr	r1, [pc, #24]	@ (8005cc4 <iprintf+0x20>)
 8005caa:	ab04      	add	r3, sp, #16
 8005cac:	6808      	ldr	r0, [r1, #0]
 8005cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb2:	6881      	ldr	r1, [r0, #8]
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	f000 fd17 	bl	80066e8 <_vfiprintf_r>
 8005cba:	b003      	add	sp, #12
 8005cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc0:	b004      	add	sp, #16
 8005cc2:	4770      	bx	lr
 8005cc4:	20000018 	.word	0x20000018

08005cc8 <putchar>:
 8005cc8:	4b02      	ldr	r3, [pc, #8]	@ (8005cd4 <putchar+0xc>)
 8005cca:	4601      	mov	r1, r0
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	6882      	ldr	r2, [r0, #8]
 8005cd0:	f001 b8d0 	b.w	8006e74 <_putc_r>
 8005cd4:	20000018 	.word	0x20000018

08005cd8 <_puts_r>:
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	6884      	ldr	r4, [r0, #8]
 8005cde:	4605      	mov	r5, r0
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <_puts_r+0x10>
 8005ce4:	f7ff ffa8 	bl	8005c38 <__sinit>
 8005ce8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cea:	07db      	lsls	r3, r3, #31
 8005cec:	d405      	bmi.n	8005cfa <_puts_r+0x22>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	0598      	lsls	r0, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_puts_r+0x22>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf6:	f000 fa3e 	bl	8006176 <__retarget_lock_acquire_recursive>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	0719      	lsls	r1, r3, #28
 8005cfe:	d502      	bpl.n	8005d06 <_puts_r+0x2e>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d135      	bne.n	8005d72 <_puts_r+0x9a>
 8005d06:	4621      	mov	r1, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f8e5 	bl	8005ed8 <__swsetup_r>
 8005d0e:	b380      	cbz	r0, 8005d72 <_puts_r+0x9a>
 8005d10:	f04f 35ff 	mov.w	r5, #4294967295
 8005d14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d16:	07da      	lsls	r2, r3, #31
 8005d18:	d405      	bmi.n	8005d26 <_puts_r+0x4e>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_puts_r+0x4e>
 8005d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d22:	f000 fa29 	bl	8006178 <__retarget_lock_release_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	da04      	bge.n	8005d38 <_puts_r+0x60>
 8005d2e:	69a2      	ldr	r2, [r4, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	dc17      	bgt.n	8005d64 <_puts_r+0x8c>
 8005d34:	290a      	cmp	r1, #10
 8005d36:	d015      	beq.n	8005d64 <_puts_r+0x8c>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	7019      	strb	r1, [r3, #0]
 8005d40:	68a3      	ldr	r3, [r4, #8]
 8005d42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d1ed      	bne.n	8005d2a <_puts_r+0x52>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da11      	bge.n	8005d76 <_puts_r+0x9e>
 8005d52:	4622      	mov	r2, r4
 8005d54:	210a      	movs	r1, #10
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 f87f 	bl	8005e5a <__swbuf_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d0d7      	beq.n	8005d10 <_puts_r+0x38>
 8005d60:	250a      	movs	r5, #10
 8005d62:	e7d7      	b.n	8005d14 <_puts_r+0x3c>
 8005d64:	4622      	mov	r2, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f877 	bl	8005e5a <__swbuf_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d1e7      	bne.n	8005d40 <_puts_r+0x68>
 8005d70:	e7ce      	b.n	8005d10 <_puts_r+0x38>
 8005d72:	3e01      	subs	r6, #1
 8005d74:	e7e4      	b.n	8005d40 <_puts_r+0x68>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	6022      	str	r2, [r4, #0]
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e7ee      	b.n	8005d60 <_puts_r+0x88>
	...

08005d84 <puts>:
 8005d84:	4b02      	ldr	r3, [pc, #8]	@ (8005d90 <puts+0xc>)
 8005d86:	4601      	mov	r1, r0
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	f7ff bfa5 	b.w	8005cd8 <_puts_r>
 8005d8e:	bf00      	nop
 8005d90:	20000018 	.word	0x20000018

08005d94 <siprintf>:
 8005d94:	b40e      	push	{r1, r2, r3}
 8005d96:	b500      	push	{lr}
 8005d98:	b09c      	sub	sp, #112	@ 0x70
 8005d9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	9006      	str	r0, [sp, #24]
 8005da0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005da4:	4809      	ldr	r0, [pc, #36]	@ (8005dcc <siprintf+0x38>)
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	9104      	str	r1, [sp, #16]
 8005daa:	4909      	ldr	r1, [pc, #36]	@ (8005dd0 <siprintf+0x3c>)
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	a902      	add	r1, sp, #8
 8005db8:	f000 fb70 	bl	800649c <_svfiprintf_r>
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	b01c      	add	sp, #112	@ 0x70
 8005dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc8:	b003      	add	sp, #12
 8005dca:	4770      	bx	lr
 8005dcc:	20000018 	.word	0x20000018
 8005dd0:	ffff0208 	.word	0xffff0208

08005dd4 <__sread>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	f000 f97c 	bl	80060d8 <_read_r>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	bfab      	itete	ge
 8005de4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005de6:	89a3      	ldrhlt	r3, [r4, #12]
 8005de8:	181b      	addge	r3, r3, r0
 8005dea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dee:	bfac      	ite	ge
 8005df0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005df2:	81a3      	strhlt	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__swrite>:
 8005df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	898b      	ldrh	r3, [r1, #12]
 8005dfe:	05db      	lsls	r3, r3, #23
 8005e00:	4605      	mov	r5, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4616      	mov	r6, r2
 8005e06:	d505      	bpl.n	8005e14 <__swrite+0x1e>
 8005e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f000 f950 	bl	80060b4 <_lseek_r>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	4632      	mov	r2, r6
 8005e22:	463b      	mov	r3, r7
 8005e24:	4628      	mov	r0, r5
 8005e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	f000 b967 	b.w	80060fc <_write_r>

08005e2e <__sseek>:
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	460c      	mov	r4, r1
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 f93d 	bl	80060b4 <_lseek_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	bf15      	itete	ne
 8005e40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e4a:	81a3      	strheq	r3, [r4, #12]
 8005e4c:	bf18      	it	ne
 8005e4e:	81a3      	strhne	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__sclose>:
 8005e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e56:	f000 b91d 	b.w	8006094 <_close_r>

08005e5a <__swbuf_r>:
 8005e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	4614      	mov	r4, r2
 8005e60:	4605      	mov	r5, r0
 8005e62:	b118      	cbz	r0, 8005e6c <__swbuf_r+0x12>
 8005e64:	6a03      	ldr	r3, [r0, #32]
 8005e66:	b90b      	cbnz	r3, 8005e6c <__swbuf_r+0x12>
 8005e68:	f7ff fee6 	bl	8005c38 <__sinit>
 8005e6c:	69a3      	ldr	r3, [r4, #24]
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	071a      	lsls	r2, r3, #28
 8005e74:	d501      	bpl.n	8005e7a <__swbuf_r+0x20>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	b943      	cbnz	r3, 8005e8c <__swbuf_r+0x32>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 f82b 	bl	8005ed8 <__swsetup_r>
 8005e82:	b118      	cbz	r0, 8005e8c <__swbuf_r+0x32>
 8005e84:	f04f 37ff 	mov.w	r7, #4294967295
 8005e88:	4638      	mov	r0, r7
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	6922      	ldr	r2, [r4, #16]
 8005e90:	1a98      	subs	r0, r3, r2
 8005e92:	6963      	ldr	r3, [r4, #20]
 8005e94:	b2f6      	uxtb	r6, r6
 8005e96:	4283      	cmp	r3, r0
 8005e98:	4637      	mov	r7, r6
 8005e9a:	dc05      	bgt.n	8005ea8 <__swbuf_r+0x4e>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 ff4c 	bl	8006d3c <_fflush_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d1ed      	bne.n	8005e84 <__swbuf_r+0x2a>
 8005ea8:	68a3      	ldr	r3, [r4, #8]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	701e      	strb	r6, [r3, #0]
 8005eb6:	6962      	ldr	r2, [r4, #20]
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d004      	beq.n	8005ec8 <__swbuf_r+0x6e>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	07db      	lsls	r3, r3, #31
 8005ec2:	d5e1      	bpl.n	8005e88 <__swbuf_r+0x2e>
 8005ec4:	2e0a      	cmp	r6, #10
 8005ec6:	d1df      	bne.n	8005e88 <__swbuf_r+0x2e>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 ff36 	bl	8006d3c <_fflush_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d0d9      	beq.n	8005e88 <__swbuf_r+0x2e>
 8005ed4:	e7d6      	b.n	8005e84 <__swbuf_r+0x2a>
	...

08005ed8 <__swsetup_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4b29      	ldr	r3, [pc, #164]	@ (8005f80 <__swsetup_r+0xa8>)
 8005edc:	4605      	mov	r5, r0
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	b118      	cbz	r0, 8005eec <__swsetup_r+0x14>
 8005ee4:	6a03      	ldr	r3, [r0, #32]
 8005ee6:	b90b      	cbnz	r3, 8005eec <__swsetup_r+0x14>
 8005ee8:	f7ff fea6 	bl	8005c38 <__sinit>
 8005eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef0:	0719      	lsls	r1, r3, #28
 8005ef2:	d422      	bmi.n	8005f3a <__swsetup_r+0x62>
 8005ef4:	06da      	lsls	r2, r3, #27
 8005ef6:	d407      	bmi.n	8005f08 <__swsetup_r+0x30>
 8005ef8:	2209      	movs	r2, #9
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295
 8005f06:	e033      	b.n	8005f70 <__swsetup_r+0x98>
 8005f08:	0758      	lsls	r0, r3, #29
 8005f0a:	d512      	bpl.n	8005f32 <__swsetup_r+0x5a>
 8005f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f0e:	b141      	cbz	r1, 8005f22 <__swsetup_r+0x4a>
 8005f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d002      	beq.n	8005f1e <__swsetup_r+0x46>
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f963 	bl	80061e4 <_free_r>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f043 0308 	orr.w	r3, r3, #8
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	b94b      	cbnz	r3, 8005f52 <__swsetup_r+0x7a>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f48:	d003      	beq.n	8005f52 <__swsetup_r+0x7a>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 ff55 	bl	8006dfc <__smakebuf_r>
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	f013 0201 	ands.w	r2, r3, #1
 8005f5a:	d00a      	beq.n	8005f72 <__swsetup_r+0x9a>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60a2      	str	r2, [r4, #8]
 8005f60:	6962      	ldr	r2, [r4, #20]
 8005f62:	4252      	negs	r2, r2
 8005f64:	61a2      	str	r2, [r4, #24]
 8005f66:	6922      	ldr	r2, [r4, #16]
 8005f68:	b942      	cbnz	r2, 8005f7c <__swsetup_r+0xa4>
 8005f6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f6e:	d1c5      	bne.n	8005efc <__swsetup_r+0x24>
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	0799      	lsls	r1, r3, #30
 8005f74:	bf58      	it	pl
 8005f76:	6962      	ldrpl	r2, [r4, #20]
 8005f78:	60a2      	str	r2, [r4, #8]
 8005f7a:	e7f4      	b.n	8005f66 <__swsetup_r+0x8e>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e7f7      	b.n	8005f70 <__swsetup_r+0x98>
 8005f80:	20000018 	.word	0x20000018

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <strchr>:
 8005f94:	b2c9      	uxtb	r1, r1
 8005f96:	4603      	mov	r3, r0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9e:	b112      	cbz	r2, 8005fa6 <strchr+0x12>
 8005fa0:	428a      	cmp	r2, r1
 8005fa2:	d1f9      	bne.n	8005f98 <strchr+0x4>
 8005fa4:	4770      	bx	lr
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	bf18      	it	ne
 8005faa:	2000      	movne	r0, #0
 8005fac:	4770      	bx	lr
	...

08005fb0 <strtok>:
 8005fb0:	4b16      	ldr	r3, [pc, #88]	@ (800600c <strtok+0x5c>)
 8005fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	681f      	ldr	r7, [r3, #0]
 8005fb8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005fba:	4605      	mov	r5, r0
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	b9ec      	cbnz	r4, 8005ffc <strtok+0x4c>
 8005fc0:	2050      	movs	r0, #80	@ 0x50
 8005fc2:	f000 f959 	bl	8006278 <malloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6478      	str	r0, [r7, #68]	@ 0x44
 8005fca:	b920      	cbnz	r0, 8005fd6 <strtok+0x26>
 8005fcc:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <strtok+0x60>)
 8005fce:	4811      	ldr	r0, [pc, #68]	@ (8006014 <strtok+0x64>)
 8005fd0:	215b      	movs	r1, #91	@ 0x5b
 8005fd2:	f000 f8e9 	bl	80061a8 <__assert_func>
 8005fd6:	e9c0 4400 	strd	r4, r4, [r0]
 8005fda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005fde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005fe2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005fe6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005fea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005fee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005ff2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005ff6:	6184      	str	r4, [r0, #24]
 8005ff8:	7704      	strb	r4, [r0, #28]
 8005ffa:	6244      	str	r4, [r0, #36]	@ 0x24
 8005ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	2301      	movs	r3, #1
 8006004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006008:	f000 b806 	b.w	8006018 <__strtok_r>
 800600c:	20000018 	.word	0x20000018
 8006010:	08007720 	.word	0x08007720
 8006014:	08007737 	.word	0x08007737

08006018 <__strtok_r>:
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	b908      	cbnz	r0, 8006022 <__strtok_r+0xa>
 800601e:	6814      	ldr	r4, [r2, #0]
 8006020:	b144      	cbz	r4, 8006034 <__strtok_r+0x1c>
 8006022:	4620      	mov	r0, r4
 8006024:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006028:	460f      	mov	r7, r1
 800602a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800602e:	b91e      	cbnz	r6, 8006038 <__strtok_r+0x20>
 8006030:	b965      	cbnz	r5, 800604c <__strtok_r+0x34>
 8006032:	6015      	str	r5, [r2, #0]
 8006034:	2000      	movs	r0, #0
 8006036:	e005      	b.n	8006044 <__strtok_r+0x2c>
 8006038:	42b5      	cmp	r5, r6
 800603a:	d1f6      	bne.n	800602a <__strtok_r+0x12>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f0      	bne.n	8006022 <__strtok_r+0xa>
 8006040:	6014      	str	r4, [r2, #0]
 8006042:	7003      	strb	r3, [r0, #0]
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006046:	461c      	mov	r4, r3
 8006048:	e00c      	b.n	8006064 <__strtok_r+0x4c>
 800604a:	b915      	cbnz	r5, 8006052 <__strtok_r+0x3a>
 800604c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006050:	460e      	mov	r6, r1
 8006052:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006056:	42ab      	cmp	r3, r5
 8006058:	d1f7      	bne.n	800604a <__strtok_r+0x32>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f3      	beq.n	8006046 <__strtok_r+0x2e>
 800605e:	2300      	movs	r3, #0
 8006060:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	e7ed      	b.n	8006044 <__strtok_r+0x2c>

08006068 <strstr>:
 8006068:	780a      	ldrb	r2, [r1, #0]
 800606a:	b570      	push	{r4, r5, r6, lr}
 800606c:	b96a      	cbnz	r2, 800608a <strstr+0x22>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	429a      	cmp	r2, r3
 8006072:	d109      	bne.n	8006088 <strstr+0x20>
 8006074:	460c      	mov	r4, r1
 8006076:	4605      	mov	r5, r0
 8006078:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f6      	beq.n	800606e <strstr+0x6>
 8006080:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006084:	429e      	cmp	r6, r3
 8006086:	d0f7      	beq.n	8006078 <strstr+0x10>
 8006088:	3001      	adds	r0, #1
 800608a:	7803      	ldrb	r3, [r0, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ef      	bne.n	8006070 <strstr+0x8>
 8006090:	4618      	mov	r0, r3
 8006092:	e7ec      	b.n	800606e <strstr+0x6>

08006094 <_close_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	@ (80060b0 <_close_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fb fe80 	bl	8001da4 <_close>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_close_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_close_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000be4 	.word	0x20000be4

080060b4 <_lseek_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d07      	ldr	r5, [pc, #28]	@ (80060d4 <_lseek_r+0x20>)
 80060b8:	4604      	mov	r4, r0
 80060ba:	4608      	mov	r0, r1
 80060bc:	4611      	mov	r1, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fb fe95 	bl	8001df2 <_lseek>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_lseek_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_lseek_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000be4 	.word	0x20000be4

080060d8 <_read_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	@ (80060f8 <_read_r+0x20>)
 80060dc:	4604      	mov	r4, r0
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb fe23 	bl	8001d32 <_read>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_read_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_read_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000be4 	.word	0x20000be4

080060fc <_write_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	@ (800611c <_write_r+0x20>)
 8006100:	4604      	mov	r4, r0
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	2200      	movs	r2, #0
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	f7fb fe2e 	bl	8001d6c <_write>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_write_r+0x1e>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_write_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000be4 	.word	0x20000be4

08006120 <__errno>:
 8006120:	4b01      	ldr	r3, [pc, #4]	@ (8006128 <__errno+0x8>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000018 	.word	0x20000018

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	@ (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	@ (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	@ (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	@ (8006170 <__libc_init_array+0x44>)
 8006140:	f000 ff9a 	bl	8007078 <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08007808 	.word	0x08007808
 8006168:	08007808 	.word	0x08007808
 800616c:	08007808 	.word	0x08007808
 8006170:	0800780c 	.word	0x0800780c

08006174 <__retarget_lock_init_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_acquire_recursive>:
 8006176:	4770      	bx	lr

08006178 <__retarget_lock_release_recursive>:
 8006178:	4770      	bx	lr

0800617a <strcpy>:
 800617a:	4603      	mov	r3, r0
 800617c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006180:	f803 2b01 	strb.w	r2, [r3], #1
 8006184:	2a00      	cmp	r2, #0
 8006186:	d1f9      	bne.n	800617c <strcpy+0x2>
 8006188:	4770      	bx	lr

0800618a <memcpy>:
 800618a:	440a      	add	r2, r1
 800618c:	4291      	cmp	r1, r2
 800618e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006192:	d100      	bne.n	8006196 <memcpy+0xc>
 8006194:	4770      	bx	lr
 8006196:	b510      	push	{r4, lr}
 8006198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061a0:	4291      	cmp	r1, r2
 80061a2:	d1f9      	bne.n	8006198 <memcpy+0xe>
 80061a4:	bd10      	pop	{r4, pc}
	...

080061a8 <__assert_func>:
 80061a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061aa:	4614      	mov	r4, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <__assert_func+0x2c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4605      	mov	r5, r0
 80061b4:	68d8      	ldr	r0, [r3, #12]
 80061b6:	b954      	cbnz	r4, 80061ce <__assert_func+0x26>
 80061b8:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <__assert_func+0x30>)
 80061ba:	461c      	mov	r4, r3
 80061bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061c0:	9100      	str	r1, [sp, #0]
 80061c2:	462b      	mov	r3, r5
 80061c4:	4905      	ldr	r1, [pc, #20]	@ (80061dc <__assert_func+0x34>)
 80061c6:	f000 fde1 	bl	8006d8c <fiprintf>
 80061ca:	f000 fed3 	bl	8006f74 <abort>
 80061ce:	4b04      	ldr	r3, [pc, #16]	@ (80061e0 <__assert_func+0x38>)
 80061d0:	e7f4      	b.n	80061bc <__assert_func+0x14>
 80061d2:	bf00      	nop
 80061d4:	20000018 	.word	0x20000018
 80061d8:	080077cc 	.word	0x080077cc
 80061dc:	0800779e 	.word	0x0800779e
 80061e0:	08007791 	.word	0x08007791

080061e4 <_free_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4605      	mov	r5, r0
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d041      	beq.n	8006270 <_free_r+0x8c>
 80061ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f0:	1f0c      	subs	r4, r1, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bfb8      	it	lt
 80061f6:	18e4      	addlt	r4, r4, r3
 80061f8:	f000 f8e8 	bl	80063cc <__malloc_lock>
 80061fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <_free_r+0x90>)
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	b933      	cbnz	r3, 8006210 <_free_r+0x2c>
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6014      	str	r4, [r2, #0]
 8006206:	4628      	mov	r0, r5
 8006208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800620c:	f000 b8e4 	b.w	80063d8 <__malloc_unlock>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d908      	bls.n	8006226 <_free_r+0x42>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	1821      	adds	r1, r4, r0
 8006218:	428b      	cmp	r3, r1
 800621a:	bf01      	itttt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	1809      	addeq	r1, r1, r0
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	e7ed      	b.n	8006202 <_free_r+0x1e>
 8006226:	461a      	mov	r2, r3
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b10b      	cbz	r3, 8006230 <_free_r+0x4c>
 800622c:	42a3      	cmp	r3, r4
 800622e:	d9fa      	bls.n	8006226 <_free_r+0x42>
 8006230:	6811      	ldr	r1, [r2, #0]
 8006232:	1850      	adds	r0, r2, r1
 8006234:	42a0      	cmp	r0, r4
 8006236:	d10b      	bne.n	8006250 <_free_r+0x6c>
 8006238:	6820      	ldr	r0, [r4, #0]
 800623a:	4401      	add	r1, r0
 800623c:	1850      	adds	r0, r2, r1
 800623e:	4283      	cmp	r3, r0
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	d1e0      	bne.n	8006206 <_free_r+0x22>
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	4408      	add	r0, r1
 800624c:	6010      	str	r0, [r2, #0]
 800624e:	e7da      	b.n	8006206 <_free_r+0x22>
 8006250:	d902      	bls.n	8006258 <_free_r+0x74>
 8006252:	230c      	movs	r3, #12
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	e7d6      	b.n	8006206 <_free_r+0x22>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf04      	itt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	bf04      	itt	eq
 8006268:	1809      	addeq	r1, r1, r0
 800626a:	6021      	streq	r1, [r4, #0]
 800626c:	6054      	str	r4, [r2, #4]
 800626e:	e7ca      	b.n	8006206 <_free_r+0x22>
 8006270:	bd38      	pop	{r3, r4, r5, pc}
 8006272:	bf00      	nop
 8006274:	20000bf0 	.word	0x20000bf0

08006278 <malloc>:
 8006278:	4b02      	ldr	r3, [pc, #8]	@ (8006284 <malloc+0xc>)
 800627a:	4601      	mov	r1, r0
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	f000 b825 	b.w	80062cc <_malloc_r>
 8006282:	bf00      	nop
 8006284:	20000018 	.word	0x20000018

08006288 <sbrk_aligned>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4e0f      	ldr	r6, [pc, #60]	@ (80062c8 <sbrk_aligned+0x40>)
 800628c:	460c      	mov	r4, r1
 800628e:	6831      	ldr	r1, [r6, #0]
 8006290:	4605      	mov	r5, r0
 8006292:	b911      	cbnz	r1, 800629a <sbrk_aligned+0x12>
 8006294:	f000 fe5e 	bl	8006f54 <_sbrk_r>
 8006298:	6030      	str	r0, [r6, #0]
 800629a:	4621      	mov	r1, r4
 800629c:	4628      	mov	r0, r5
 800629e:	f000 fe59 	bl	8006f54 <_sbrk_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	d103      	bne.n	80062ae <sbrk_aligned+0x26>
 80062a6:	f04f 34ff 	mov.w	r4, #4294967295
 80062aa:	4620      	mov	r0, r4
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
 80062ae:	1cc4      	adds	r4, r0, #3
 80062b0:	f024 0403 	bic.w	r4, r4, #3
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d0f8      	beq.n	80062aa <sbrk_aligned+0x22>
 80062b8:	1a21      	subs	r1, r4, r0
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fe4a 	bl	8006f54 <_sbrk_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1f2      	bne.n	80062aa <sbrk_aligned+0x22>
 80062c4:	e7ef      	b.n	80062a6 <sbrk_aligned+0x1e>
 80062c6:	bf00      	nop
 80062c8:	20000bec 	.word	0x20000bec

080062cc <_malloc_r>:
 80062cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d0:	1ccd      	adds	r5, r1, #3
 80062d2:	f025 0503 	bic.w	r5, r5, #3
 80062d6:	3508      	adds	r5, #8
 80062d8:	2d0c      	cmp	r5, #12
 80062da:	bf38      	it	cc
 80062dc:	250c      	movcc	r5, #12
 80062de:	2d00      	cmp	r5, #0
 80062e0:	4606      	mov	r6, r0
 80062e2:	db01      	blt.n	80062e8 <_malloc_r+0x1c>
 80062e4:	42a9      	cmp	r1, r5
 80062e6:	d904      	bls.n	80062f2 <_malloc_r+0x26>
 80062e8:	230c      	movs	r3, #12
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	2000      	movs	r0, #0
 80062ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063c8 <_malloc_r+0xfc>
 80062f6:	f000 f869 	bl	80063cc <__malloc_lock>
 80062fa:	f8d8 3000 	ldr.w	r3, [r8]
 80062fe:	461c      	mov	r4, r3
 8006300:	bb44      	cbnz	r4, 8006354 <_malloc_r+0x88>
 8006302:	4629      	mov	r1, r5
 8006304:	4630      	mov	r0, r6
 8006306:	f7ff ffbf 	bl	8006288 <sbrk_aligned>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	4604      	mov	r4, r0
 800630e:	d158      	bne.n	80063c2 <_malloc_r+0xf6>
 8006310:	f8d8 4000 	ldr.w	r4, [r8]
 8006314:	4627      	mov	r7, r4
 8006316:	2f00      	cmp	r7, #0
 8006318:	d143      	bne.n	80063a2 <_malloc_r+0xd6>
 800631a:	2c00      	cmp	r4, #0
 800631c:	d04b      	beq.n	80063b6 <_malloc_r+0xea>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	4639      	mov	r1, r7
 8006322:	4630      	mov	r0, r6
 8006324:	eb04 0903 	add.w	r9, r4, r3
 8006328:	f000 fe14 	bl	8006f54 <_sbrk_r>
 800632c:	4581      	cmp	r9, r0
 800632e:	d142      	bne.n	80063b6 <_malloc_r+0xea>
 8006330:	6821      	ldr	r1, [r4, #0]
 8006332:	1a6d      	subs	r5, r5, r1
 8006334:	4629      	mov	r1, r5
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ffa6 	bl	8006288 <sbrk_aligned>
 800633c:	3001      	adds	r0, #1
 800633e:	d03a      	beq.n	80063b6 <_malloc_r+0xea>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	442b      	add	r3, r5
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	f8d8 3000 	ldr.w	r3, [r8]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	bb62      	cbnz	r2, 80063a8 <_malloc_r+0xdc>
 800634e:	f8c8 7000 	str.w	r7, [r8]
 8006352:	e00f      	b.n	8006374 <_malloc_r+0xa8>
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	1b52      	subs	r2, r2, r5
 8006358:	d420      	bmi.n	800639c <_malloc_r+0xd0>
 800635a:	2a0b      	cmp	r2, #11
 800635c:	d917      	bls.n	800638e <_malloc_r+0xc2>
 800635e:	1961      	adds	r1, r4, r5
 8006360:	42a3      	cmp	r3, r4
 8006362:	6025      	str	r5, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	6059      	strne	r1, [r3, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	bf08      	it	eq
 800636c:	f8c8 1000 	streq.w	r1, [r8]
 8006370:	5162      	str	r2, [r4, r5]
 8006372:	604b      	str	r3, [r1, #4]
 8006374:	4630      	mov	r0, r6
 8006376:	f000 f82f 	bl	80063d8 <__malloc_unlock>
 800637a:	f104 000b 	add.w	r0, r4, #11
 800637e:	1d23      	adds	r3, r4, #4
 8006380:	f020 0007 	bic.w	r0, r0, #7
 8006384:	1ac2      	subs	r2, r0, r3
 8006386:	bf1c      	itt	ne
 8006388:	1a1b      	subne	r3, r3, r0
 800638a:	50a3      	strne	r3, [r4, r2]
 800638c:	e7af      	b.n	80062ee <_malloc_r+0x22>
 800638e:	6862      	ldr	r2, [r4, #4]
 8006390:	42a3      	cmp	r3, r4
 8006392:	bf0c      	ite	eq
 8006394:	f8c8 2000 	streq.w	r2, [r8]
 8006398:	605a      	strne	r2, [r3, #4]
 800639a:	e7eb      	b.n	8006374 <_malloc_r+0xa8>
 800639c:	4623      	mov	r3, r4
 800639e:	6864      	ldr	r4, [r4, #4]
 80063a0:	e7ae      	b.n	8006300 <_malloc_r+0x34>
 80063a2:	463c      	mov	r4, r7
 80063a4:	687f      	ldr	r7, [r7, #4]
 80063a6:	e7b6      	b.n	8006316 <_malloc_r+0x4a>
 80063a8:	461a      	mov	r2, r3
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d1fb      	bne.n	80063a8 <_malloc_r+0xdc>
 80063b0:	2300      	movs	r3, #0
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	e7de      	b.n	8006374 <_malloc_r+0xa8>
 80063b6:	230c      	movs	r3, #12
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f80c 	bl	80063d8 <__malloc_unlock>
 80063c0:	e794      	b.n	80062ec <_malloc_r+0x20>
 80063c2:	6005      	str	r5, [r0, #0]
 80063c4:	e7d6      	b.n	8006374 <_malloc_r+0xa8>
 80063c6:	bf00      	nop
 80063c8:	20000bf0 	.word	0x20000bf0

080063cc <__malloc_lock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	@ (80063d4 <__malloc_lock+0x8>)
 80063ce:	f7ff bed2 	b.w	8006176 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	20000be8 	.word	0x20000be8

080063d8 <__malloc_unlock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	@ (80063e0 <__malloc_unlock+0x8>)
 80063da:	f7ff becd 	b.w	8006178 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	20000be8 	.word	0x20000be8

080063e4 <__ssputs_r>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	688e      	ldr	r6, [r1, #8]
 80063ea:	461f      	mov	r7, r3
 80063ec:	42be      	cmp	r6, r7
 80063ee:	680b      	ldr	r3, [r1, #0]
 80063f0:	4682      	mov	sl, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	4690      	mov	r8, r2
 80063f6:	d82d      	bhi.n	8006454 <__ssputs_r+0x70>
 80063f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006400:	d026      	beq.n	8006450 <__ssputs_r+0x6c>
 8006402:	6965      	ldr	r5, [r4, #20]
 8006404:	6909      	ldr	r1, [r1, #16]
 8006406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800640a:	eba3 0901 	sub.w	r9, r3, r1
 800640e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006412:	1c7b      	adds	r3, r7, #1
 8006414:	444b      	add	r3, r9
 8006416:	106d      	asrs	r5, r5, #1
 8006418:	429d      	cmp	r5, r3
 800641a:	bf38      	it	cc
 800641c:	461d      	movcc	r5, r3
 800641e:	0553      	lsls	r3, r2, #21
 8006420:	d527      	bpl.n	8006472 <__ssputs_r+0x8e>
 8006422:	4629      	mov	r1, r5
 8006424:	f7ff ff52 	bl	80062cc <_malloc_r>
 8006428:	4606      	mov	r6, r0
 800642a:	b360      	cbz	r0, 8006486 <__ssputs_r+0xa2>
 800642c:	6921      	ldr	r1, [r4, #16]
 800642e:	464a      	mov	r2, r9
 8006430:	f7ff feab 	bl	800618a <memcpy>
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800643a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	6126      	str	r6, [r4, #16]
 8006442:	6165      	str	r5, [r4, #20]
 8006444:	444e      	add	r6, r9
 8006446:	eba5 0509 	sub.w	r5, r5, r9
 800644a:	6026      	str	r6, [r4, #0]
 800644c:	60a5      	str	r5, [r4, #8]
 800644e:	463e      	mov	r6, r7
 8006450:	42be      	cmp	r6, r7
 8006452:	d900      	bls.n	8006456 <__ssputs_r+0x72>
 8006454:	463e      	mov	r6, r7
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	4632      	mov	r2, r6
 800645a:	4641      	mov	r1, r8
 800645c:	f000 fd3e 	bl	8006edc <memmove>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	1b9b      	subs	r3, r3, r6
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	4433      	add	r3, r6
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	2000      	movs	r0, #0
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	462a      	mov	r2, r5
 8006474:	f000 fd85 	bl	8006f82 <_realloc_r>
 8006478:	4606      	mov	r6, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	d1e0      	bne.n	8006440 <__ssputs_r+0x5c>
 800647e:	6921      	ldr	r1, [r4, #16]
 8006480:	4650      	mov	r0, sl
 8006482:	f7ff feaf 	bl	80061e4 <_free_r>
 8006486:	230c      	movs	r3, #12
 8006488:	f8ca 3000 	str.w	r3, [sl]
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e7e9      	b.n	800646e <__ssputs_r+0x8a>
	...

0800649c <_svfiprintf_r>:
 800649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	4698      	mov	r8, r3
 80064a2:	898b      	ldrh	r3, [r1, #12]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	b09d      	sub	sp, #116	@ 0x74
 80064a8:	4607      	mov	r7, r0
 80064aa:	460d      	mov	r5, r1
 80064ac:	4614      	mov	r4, r2
 80064ae:	d510      	bpl.n	80064d2 <_svfiprintf_r+0x36>
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	b973      	cbnz	r3, 80064d2 <_svfiprintf_r+0x36>
 80064b4:	2140      	movs	r1, #64	@ 0x40
 80064b6:	f7ff ff09 	bl	80062cc <_malloc_r>
 80064ba:	6028      	str	r0, [r5, #0]
 80064bc:	6128      	str	r0, [r5, #16]
 80064be:	b930      	cbnz	r0, 80064ce <_svfiprintf_r+0x32>
 80064c0:	230c      	movs	r3, #12
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b01d      	add	sp, #116	@ 0x74
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	2340      	movs	r3, #64	@ 0x40
 80064d0:	616b      	str	r3, [r5, #20]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d6:	2320      	movs	r3, #32
 80064d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e0:	2330      	movs	r3, #48	@ 0x30
 80064e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006680 <_svfiprintf_r+0x1e4>
 80064e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064ea:	f04f 0901 	mov.w	r9, #1
 80064ee:	4623      	mov	r3, r4
 80064f0:	469a      	mov	sl, r3
 80064f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f6:	b10a      	cbz	r2, 80064fc <_svfiprintf_r+0x60>
 80064f8:	2a25      	cmp	r2, #37	@ 0x25
 80064fa:	d1f9      	bne.n	80064f0 <_svfiprintf_r+0x54>
 80064fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006500:	d00b      	beq.n	800651a <_svfiprintf_r+0x7e>
 8006502:	465b      	mov	r3, fp
 8006504:	4622      	mov	r2, r4
 8006506:	4629      	mov	r1, r5
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ff6b 	bl	80063e4 <__ssputs_r>
 800650e:	3001      	adds	r0, #1
 8006510:	f000 80a7 	beq.w	8006662 <_svfiprintf_r+0x1c6>
 8006514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006516:	445a      	add	r2, fp
 8006518:	9209      	str	r2, [sp, #36]	@ 0x24
 800651a:	f89a 3000 	ldrb.w	r3, [sl]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 809f 	beq.w	8006662 <_svfiprintf_r+0x1c6>
 8006524:	2300      	movs	r3, #0
 8006526:	f04f 32ff 	mov.w	r2, #4294967295
 800652a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800652e:	f10a 0a01 	add.w	sl, sl, #1
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	9307      	str	r3, [sp, #28]
 8006536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800653a:	931a      	str	r3, [sp, #104]	@ 0x68
 800653c:	4654      	mov	r4, sl
 800653e:	2205      	movs	r2, #5
 8006540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006544:	484e      	ldr	r0, [pc, #312]	@ (8006680 <_svfiprintf_r+0x1e4>)
 8006546:	f7f9 fe63 	bl	8000210 <memchr>
 800654a:	9a04      	ldr	r2, [sp, #16]
 800654c:	b9d8      	cbnz	r0, 8006586 <_svfiprintf_r+0xea>
 800654e:	06d0      	lsls	r0, r2, #27
 8006550:	bf44      	itt	mi
 8006552:	2320      	movmi	r3, #32
 8006554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006558:	0711      	lsls	r1, r2, #28
 800655a:	bf44      	itt	mi
 800655c:	232b      	movmi	r3, #43	@ 0x2b
 800655e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006562:	f89a 3000 	ldrb.w	r3, [sl]
 8006566:	2b2a      	cmp	r3, #42	@ 0x2a
 8006568:	d015      	beq.n	8006596 <_svfiprintf_r+0xfa>
 800656a:	9a07      	ldr	r2, [sp, #28]
 800656c:	4654      	mov	r4, sl
 800656e:	2000      	movs	r0, #0
 8006570:	f04f 0c0a 	mov.w	ip, #10
 8006574:	4621      	mov	r1, r4
 8006576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657a:	3b30      	subs	r3, #48	@ 0x30
 800657c:	2b09      	cmp	r3, #9
 800657e:	d94b      	bls.n	8006618 <_svfiprintf_r+0x17c>
 8006580:	b1b0      	cbz	r0, 80065b0 <_svfiprintf_r+0x114>
 8006582:	9207      	str	r2, [sp, #28]
 8006584:	e014      	b.n	80065b0 <_svfiprintf_r+0x114>
 8006586:	eba0 0308 	sub.w	r3, r0, r8
 800658a:	fa09 f303 	lsl.w	r3, r9, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	46a2      	mov	sl, r4
 8006594:	e7d2      	b.n	800653c <_svfiprintf_r+0xa0>
 8006596:	9b03      	ldr	r3, [sp, #12]
 8006598:	1d19      	adds	r1, r3, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	9103      	str	r1, [sp, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfbb      	ittet	lt
 80065a2:	425b      	neglt	r3, r3
 80065a4:	f042 0202 	orrlt.w	r2, r2, #2
 80065a8:	9307      	strge	r3, [sp, #28]
 80065aa:	9307      	strlt	r3, [sp, #28]
 80065ac:	bfb8      	it	lt
 80065ae:	9204      	strlt	r2, [sp, #16]
 80065b0:	7823      	ldrb	r3, [r4, #0]
 80065b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065b4:	d10a      	bne.n	80065cc <_svfiprintf_r+0x130>
 80065b6:	7863      	ldrb	r3, [r4, #1]
 80065b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ba:	d132      	bne.n	8006622 <_svfiprintf_r+0x186>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	9203      	str	r2, [sp, #12]
 80065c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065c8:	3402      	adds	r4, #2
 80065ca:	9305      	str	r3, [sp, #20]
 80065cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006690 <_svfiprintf_r+0x1f4>
 80065d0:	7821      	ldrb	r1, [r4, #0]
 80065d2:	2203      	movs	r2, #3
 80065d4:	4650      	mov	r0, sl
 80065d6:	f7f9 fe1b 	bl	8000210 <memchr>
 80065da:	b138      	cbz	r0, 80065ec <_svfiprintf_r+0x150>
 80065dc:	9b04      	ldr	r3, [sp, #16]
 80065de:	eba0 000a 	sub.w	r0, r0, sl
 80065e2:	2240      	movs	r2, #64	@ 0x40
 80065e4:	4082      	lsls	r2, r0
 80065e6:	4313      	orrs	r3, r2
 80065e8:	3401      	adds	r4, #1
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f0:	4824      	ldr	r0, [pc, #144]	@ (8006684 <_svfiprintf_r+0x1e8>)
 80065f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065f6:	2206      	movs	r2, #6
 80065f8:	f7f9 fe0a 	bl	8000210 <memchr>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d036      	beq.n	800666e <_svfiprintf_r+0x1d2>
 8006600:	4b21      	ldr	r3, [pc, #132]	@ (8006688 <_svfiprintf_r+0x1ec>)
 8006602:	bb1b      	cbnz	r3, 800664c <_svfiprintf_r+0x1b0>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	3307      	adds	r3, #7
 8006608:	f023 0307 	bic.w	r3, r3, #7
 800660c:	3308      	adds	r3, #8
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006612:	4433      	add	r3, r6
 8006614:	9309      	str	r3, [sp, #36]	@ 0x24
 8006616:	e76a      	b.n	80064ee <_svfiprintf_r+0x52>
 8006618:	fb0c 3202 	mla	r2, ip, r2, r3
 800661c:	460c      	mov	r4, r1
 800661e:	2001      	movs	r0, #1
 8006620:	e7a8      	b.n	8006574 <_svfiprintf_r+0xd8>
 8006622:	2300      	movs	r3, #0
 8006624:	3401      	adds	r4, #1
 8006626:	9305      	str	r3, [sp, #20]
 8006628:	4619      	mov	r1, r3
 800662a:	f04f 0c0a 	mov.w	ip, #10
 800662e:	4620      	mov	r0, r4
 8006630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006634:	3a30      	subs	r2, #48	@ 0x30
 8006636:	2a09      	cmp	r2, #9
 8006638:	d903      	bls.n	8006642 <_svfiprintf_r+0x1a6>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0c6      	beq.n	80065cc <_svfiprintf_r+0x130>
 800663e:	9105      	str	r1, [sp, #20]
 8006640:	e7c4      	b.n	80065cc <_svfiprintf_r+0x130>
 8006642:	fb0c 2101 	mla	r1, ip, r1, r2
 8006646:	4604      	mov	r4, r0
 8006648:	2301      	movs	r3, #1
 800664a:	e7f0      	b.n	800662e <_svfiprintf_r+0x192>
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4b0e      	ldr	r3, [pc, #56]	@ (800668c <_svfiprintf_r+0x1f0>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4638      	mov	r0, r7
 8006658:	f3af 8000 	nop.w
 800665c:	1c42      	adds	r2, r0, #1
 800665e:	4606      	mov	r6, r0
 8006660:	d1d6      	bne.n	8006610 <_svfiprintf_r+0x174>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	065b      	lsls	r3, r3, #25
 8006666:	f53f af2d 	bmi.w	80064c4 <_svfiprintf_r+0x28>
 800666a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800666c:	e72c      	b.n	80064c8 <_svfiprintf_r+0x2c>
 800666e:	ab03      	add	r3, sp, #12
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	462a      	mov	r2, r5
 8006674:	4b05      	ldr	r3, [pc, #20]	@ (800668c <_svfiprintf_r+0x1f0>)
 8006676:	a904      	add	r1, sp, #16
 8006678:	4638      	mov	r0, r7
 800667a:	f000 f9bb 	bl	80069f4 <_printf_i>
 800667e:	e7ed      	b.n	800665c <_svfiprintf_r+0x1c0>
 8006680:	080077cd 	.word	0x080077cd
 8006684:	080077d7 	.word	0x080077d7
 8006688:	00000000 	.word	0x00000000
 800668c:	080063e5 	.word	0x080063e5
 8006690:	080077d3 	.word	0x080077d3

08006694 <__sfputc_r>:
 8006694:	6893      	ldr	r3, [r2, #8]
 8006696:	3b01      	subs	r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	b410      	push	{r4}
 800669c:	6093      	str	r3, [r2, #8]
 800669e:	da08      	bge.n	80066b2 <__sfputc_r+0x1e>
 80066a0:	6994      	ldr	r4, [r2, #24]
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	db01      	blt.n	80066aa <__sfputc_r+0x16>
 80066a6:	290a      	cmp	r1, #10
 80066a8:	d103      	bne.n	80066b2 <__sfputc_r+0x1e>
 80066aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ae:	f7ff bbd4 	b.w	8005e5a <__swbuf_r>
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	1c58      	adds	r0, r3, #1
 80066b6:	6010      	str	r0, [r2, #0]
 80066b8:	7019      	strb	r1, [r3, #0]
 80066ba:	4608      	mov	r0, r1
 80066bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <__sfputs_r>:
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	4614      	mov	r4, r2
 80066ca:	18d5      	adds	r5, r2, r3
 80066cc:	42ac      	cmp	r4, r5
 80066ce:	d101      	bne.n	80066d4 <__sfputs_r+0x12>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e007      	b.n	80066e4 <__sfputs_r+0x22>
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	463a      	mov	r2, r7
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ffda 	bl	8006694 <__sfputc_r>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d1f3      	bne.n	80066cc <__sfputs_r+0xa>
 80066e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e8 <_vfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	460d      	mov	r5, r1
 80066ee:	b09d      	sub	sp, #116	@ 0x74
 80066f0:	4614      	mov	r4, r2
 80066f2:	4698      	mov	r8, r3
 80066f4:	4606      	mov	r6, r0
 80066f6:	b118      	cbz	r0, 8006700 <_vfiprintf_r+0x18>
 80066f8:	6a03      	ldr	r3, [r0, #32]
 80066fa:	b90b      	cbnz	r3, 8006700 <_vfiprintf_r+0x18>
 80066fc:	f7ff fa9c 	bl	8005c38 <__sinit>
 8006700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006702:	07d9      	lsls	r1, r3, #31
 8006704:	d405      	bmi.n	8006712 <_vfiprintf_r+0x2a>
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	059a      	lsls	r2, r3, #22
 800670a:	d402      	bmi.n	8006712 <_vfiprintf_r+0x2a>
 800670c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800670e:	f7ff fd32 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	071b      	lsls	r3, r3, #28
 8006716:	d501      	bpl.n	800671c <_vfiprintf_r+0x34>
 8006718:	692b      	ldr	r3, [r5, #16]
 800671a:	b99b      	cbnz	r3, 8006744 <_vfiprintf_r+0x5c>
 800671c:	4629      	mov	r1, r5
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff fbda 	bl	8005ed8 <__swsetup_r>
 8006724:	b170      	cbz	r0, 8006744 <_vfiprintf_r+0x5c>
 8006726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006728:	07dc      	lsls	r4, r3, #31
 800672a:	d504      	bpl.n	8006736 <_vfiprintf_r+0x4e>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	b01d      	add	sp, #116	@ 0x74
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	0598      	lsls	r0, r3, #22
 800673a:	d4f7      	bmi.n	800672c <_vfiprintf_r+0x44>
 800673c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800673e:	f7ff fd1b 	bl	8006178 <__retarget_lock_release_recursive>
 8006742:	e7f3      	b.n	800672c <_vfiprintf_r+0x44>
 8006744:	2300      	movs	r3, #0
 8006746:	9309      	str	r3, [sp, #36]	@ 0x24
 8006748:	2320      	movs	r3, #32
 800674a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800674e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006752:	2330      	movs	r3, #48	@ 0x30
 8006754:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006904 <_vfiprintf_r+0x21c>
 8006758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800675c:	f04f 0901 	mov.w	r9, #1
 8006760:	4623      	mov	r3, r4
 8006762:	469a      	mov	sl, r3
 8006764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006768:	b10a      	cbz	r2, 800676e <_vfiprintf_r+0x86>
 800676a:	2a25      	cmp	r2, #37	@ 0x25
 800676c:	d1f9      	bne.n	8006762 <_vfiprintf_r+0x7a>
 800676e:	ebba 0b04 	subs.w	fp, sl, r4
 8006772:	d00b      	beq.n	800678c <_vfiprintf_r+0xa4>
 8006774:	465b      	mov	r3, fp
 8006776:	4622      	mov	r2, r4
 8006778:	4629      	mov	r1, r5
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff ffa1 	bl	80066c2 <__sfputs_r>
 8006780:	3001      	adds	r0, #1
 8006782:	f000 80a7 	beq.w	80068d4 <_vfiprintf_r+0x1ec>
 8006786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006788:	445a      	add	r2, fp
 800678a:	9209      	str	r2, [sp, #36]	@ 0x24
 800678c:	f89a 3000 	ldrb.w	r3, [sl]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 809f 	beq.w	80068d4 <_vfiprintf_r+0x1ec>
 8006796:	2300      	movs	r3, #0
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a0:	f10a 0a01 	add.w	sl, sl, #1
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80067ae:	4654      	mov	r4, sl
 80067b0:	2205      	movs	r2, #5
 80067b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b6:	4853      	ldr	r0, [pc, #332]	@ (8006904 <_vfiprintf_r+0x21c>)
 80067b8:	f7f9 fd2a 	bl	8000210 <memchr>
 80067bc:	9a04      	ldr	r2, [sp, #16]
 80067be:	b9d8      	cbnz	r0, 80067f8 <_vfiprintf_r+0x110>
 80067c0:	06d1      	lsls	r1, r2, #27
 80067c2:	bf44      	itt	mi
 80067c4:	2320      	movmi	r3, #32
 80067c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ca:	0713      	lsls	r3, r2, #28
 80067cc:	bf44      	itt	mi
 80067ce:	232b      	movmi	r3, #43	@ 0x2b
 80067d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067d4:	f89a 3000 	ldrb.w	r3, [sl]
 80067d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067da:	d015      	beq.n	8006808 <_vfiprintf_r+0x120>
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	4654      	mov	r4, sl
 80067e0:	2000      	movs	r0, #0
 80067e2:	f04f 0c0a 	mov.w	ip, #10
 80067e6:	4621      	mov	r1, r4
 80067e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ec:	3b30      	subs	r3, #48	@ 0x30
 80067ee:	2b09      	cmp	r3, #9
 80067f0:	d94b      	bls.n	800688a <_vfiprintf_r+0x1a2>
 80067f2:	b1b0      	cbz	r0, 8006822 <_vfiprintf_r+0x13a>
 80067f4:	9207      	str	r2, [sp, #28]
 80067f6:	e014      	b.n	8006822 <_vfiprintf_r+0x13a>
 80067f8:	eba0 0308 	sub.w	r3, r0, r8
 80067fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006800:	4313      	orrs	r3, r2
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	46a2      	mov	sl, r4
 8006806:	e7d2      	b.n	80067ae <_vfiprintf_r+0xc6>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	1d19      	adds	r1, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	9103      	str	r1, [sp, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	bfbb      	ittet	lt
 8006814:	425b      	neglt	r3, r3
 8006816:	f042 0202 	orrlt.w	r2, r2, #2
 800681a:	9307      	strge	r3, [sp, #28]
 800681c:	9307      	strlt	r3, [sp, #28]
 800681e:	bfb8      	it	lt
 8006820:	9204      	strlt	r2, [sp, #16]
 8006822:	7823      	ldrb	r3, [r4, #0]
 8006824:	2b2e      	cmp	r3, #46	@ 0x2e
 8006826:	d10a      	bne.n	800683e <_vfiprintf_r+0x156>
 8006828:	7863      	ldrb	r3, [r4, #1]
 800682a:	2b2a      	cmp	r3, #42	@ 0x2a
 800682c:	d132      	bne.n	8006894 <_vfiprintf_r+0x1ac>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	9203      	str	r2, [sp, #12]
 8006836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800683a:	3402      	adds	r4, #2
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006914 <_vfiprintf_r+0x22c>
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	2203      	movs	r2, #3
 8006846:	4650      	mov	r0, sl
 8006848:	f7f9 fce2 	bl	8000210 <memchr>
 800684c:	b138      	cbz	r0, 800685e <_vfiprintf_r+0x176>
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	eba0 000a 	sub.w	r0, r0, sl
 8006854:	2240      	movs	r2, #64	@ 0x40
 8006856:	4082      	lsls	r2, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	3401      	adds	r4, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006862:	4829      	ldr	r0, [pc, #164]	@ (8006908 <_vfiprintf_r+0x220>)
 8006864:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006868:	2206      	movs	r2, #6
 800686a:	f7f9 fcd1 	bl	8000210 <memchr>
 800686e:	2800      	cmp	r0, #0
 8006870:	d03f      	beq.n	80068f2 <_vfiprintf_r+0x20a>
 8006872:	4b26      	ldr	r3, [pc, #152]	@ (800690c <_vfiprintf_r+0x224>)
 8006874:	bb1b      	cbnz	r3, 80068be <_vfiprintf_r+0x1d6>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	3307      	adds	r3, #7
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	3308      	adds	r3, #8
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006884:	443b      	add	r3, r7
 8006886:	9309      	str	r3, [sp, #36]	@ 0x24
 8006888:	e76a      	b.n	8006760 <_vfiprintf_r+0x78>
 800688a:	fb0c 3202 	mla	r2, ip, r2, r3
 800688e:	460c      	mov	r4, r1
 8006890:	2001      	movs	r0, #1
 8006892:	e7a8      	b.n	80067e6 <_vfiprintf_r+0xfe>
 8006894:	2300      	movs	r3, #0
 8006896:	3401      	adds	r4, #1
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	4619      	mov	r1, r3
 800689c:	f04f 0c0a 	mov.w	ip, #10
 80068a0:	4620      	mov	r0, r4
 80068a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a6:	3a30      	subs	r2, #48	@ 0x30
 80068a8:	2a09      	cmp	r2, #9
 80068aa:	d903      	bls.n	80068b4 <_vfiprintf_r+0x1cc>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c6      	beq.n	800683e <_vfiprintf_r+0x156>
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	e7c4      	b.n	800683e <_vfiprintf_r+0x156>
 80068b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b8:	4604      	mov	r4, r0
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f0      	b.n	80068a0 <_vfiprintf_r+0x1b8>
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	462a      	mov	r2, r5
 80068c4:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <_vfiprintf_r+0x228>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	4630      	mov	r0, r6
 80068ca:	f3af 8000 	nop.w
 80068ce:	4607      	mov	r7, r0
 80068d0:	1c78      	adds	r0, r7, #1
 80068d2:	d1d6      	bne.n	8006882 <_vfiprintf_r+0x19a>
 80068d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_vfiprintf_r+0x1fe>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_vfiprintf_r+0x1fe>
 80068e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068e2:	f7ff fc49 	bl	8006178 <__retarget_lock_release_recursive>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	065b      	lsls	r3, r3, #25
 80068ea:	f53f af1f 	bmi.w	800672c <_vfiprintf_r+0x44>
 80068ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068f0:	e71e      	b.n	8006730 <_vfiprintf_r+0x48>
 80068f2:	ab03      	add	r3, sp, #12
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	462a      	mov	r2, r5
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <_vfiprintf_r+0x228>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	4630      	mov	r0, r6
 80068fe:	f000 f879 	bl	80069f4 <_printf_i>
 8006902:	e7e4      	b.n	80068ce <_vfiprintf_r+0x1e6>
 8006904:	080077cd 	.word	0x080077cd
 8006908:	080077d7 	.word	0x080077d7
 800690c:	00000000 	.word	0x00000000
 8006910:	080066c3 	.word	0x080066c3
 8006914:	080077d3 	.word	0x080077d3

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4698      	mov	r8, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006928:	4293      	cmp	r3, r2
 800692a:	bfb8      	it	lt
 800692c:	4613      	movlt	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006934:	4607      	mov	r7, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc26      	bgt.n	80069ae <_printf_common+0x96>
 8006960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	3b00      	subs	r3, #0
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42b      	bmi.n	80069c8 <_printf_common+0xb0>
 8006970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006974:	4641      	mov	r1, r8
 8006976:	4638      	mov	r0, r7
 8006978:	47c8      	blx	r9
 800697a:	3001      	adds	r0, #1
 800697c:	d01e      	beq.n	80069bc <_printf_common+0xa4>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf02      	ittt	eq
 800698a:	68e5      	ldreq	r5, [r4, #12]
 800698c:	6833      	ldreq	r3, [r6, #0]
 800698e:	1aed      	subeq	r5, r5, r3
 8006990:	68a3      	ldr	r3, [r4, #8]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xc8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xa8>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4641      	mov	r1, r8
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c8      	blx	r9
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xac>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c6      	b.n	8006956 <_printf_common+0x3e>
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	2030      	movs	r0, #48	@ 0x30
 80069ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069d2:	4422      	add	r2, r4
 80069d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069dc:	3302      	adds	r3, #2
 80069de:	e7c7      	b.n	8006970 <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4641      	mov	r1, r8
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c8      	blx	r9
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa4>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x8e>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	7e0f      	ldrb	r7, [r1, #24]
 80069fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069fc:	2f78      	cmp	r7, #120	@ 0x78
 80069fe:	4691      	mov	r9, r2
 8006a00:	4680      	mov	r8, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	469a      	mov	sl, r3
 8006a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	@ 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d2 	beq.w	8006bba <_printf_i+0x1c6>
 8006a16:	2f58      	cmp	r7, #88	@ 0x58
 8006a18:	f000 80b9 	beq.w	8006b8e <_printf_i+0x19a>
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a34 <_printf_i+0x40>)
 8006a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006ba1 	.word	0x08006ba1
 8006a64:	08006acb 	.word	0x08006acb
 8006a68:	08006b5b 	.word	0x08006b5b
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bc3 	.word	0x08006bc3
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006acb 	.word	0x08006acb
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b63 	.word	0x08006b63
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6032      	str	r2, [r6, #0]
 8006a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e09d      	b.n	8006bdc <_printf_i+0x1e8>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	1d19      	adds	r1, r3, #4
 8006aa6:	6031      	str	r1, [r6, #0]
 8006aa8:	0606      	lsls	r6, r0, #24
 8006aaa:	d501      	bpl.n	8006ab0 <_printf_i+0xbc>
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	e003      	b.n	8006ab8 <_printf_i+0xc4>
 8006ab0:	0645      	lsls	r5, r0, #25
 8006ab2:	d5fb      	bpl.n	8006aac <_printf_i+0xb8>
 8006ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	da03      	bge.n	8006ac4 <_printf_i+0xd0>
 8006abc:	232d      	movs	r3, #45	@ 0x2d
 8006abe:	426d      	negs	r5, r5
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac4:	4859      	ldr	r0, [pc, #356]	@ (8006c2c <_printf_i+0x238>)
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	e011      	b.n	8006aee <_printf_i+0xfa>
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	0608      	lsls	r0, r1, #24
 8006ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ad4:	d402      	bmi.n	8006adc <_printf_i+0xe8>
 8006ad6:	0649      	lsls	r1, r1, #25
 8006ad8:	bf48      	it	mi
 8006ada:	b2ad      	uxthmi	r5, r5
 8006adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ade:	4853      	ldr	r0, [pc, #332]	@ (8006c2c <_printf_i+0x238>)
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	bf14      	ite	ne
 8006ae4:	230a      	movne	r3, #10
 8006ae6:	2308      	moveq	r3, #8
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aee:	6866      	ldr	r6, [r4, #4]
 8006af0:	60a6      	str	r6, [r4, #8]
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	bfa2      	ittt	ge
 8006af6:	6821      	ldrge	r1, [r4, #0]
 8006af8:	f021 0104 	bicge.w	r1, r1, #4
 8006afc:	6021      	strge	r1, [r4, #0]
 8006afe:	b90d      	cbnz	r5, 8006b04 <_printf_i+0x110>
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	d04b      	beq.n	8006b9c <_printf_i+0x1a8>
 8006b04:	4616      	mov	r6, r2
 8006b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b0e:	5dc7      	ldrb	r7, [r0, r7]
 8006b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b14:	462f      	mov	r7, r5
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	460d      	mov	r5, r1
 8006b1a:	d9f4      	bls.n	8006b06 <_printf_i+0x112>
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d10b      	bne.n	8006b38 <_printf_i+0x144>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07df      	lsls	r7, r3, #31
 8006b24:	d508      	bpl.n	8006b38 <_printf_i+0x144>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	bfde      	ittt	le
 8006b2e:	2330      	movle	r3, #48	@ 0x30
 8006b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b38:	1b92      	subs	r2, r2, r6
 8006b3a:	6122      	str	r2, [r4, #16]
 8006b3c:	f8cd a000 	str.w	sl, [sp]
 8006b40:	464b      	mov	r3, r9
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fee6 	bl	8006918 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14a      	bne.n	8006be6 <_printf_i+0x1f2>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	4833      	ldr	r0, [pc, #204]	@ (8006c30 <_printf_i+0x23c>)
 8006b64:	2778      	movs	r7, #120	@ 0x78
 8006b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	6831      	ldr	r1, [r6, #0]
 8006b6e:	061f      	lsls	r7, r3, #24
 8006b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b74:	d402      	bmi.n	8006b7c <_printf_i+0x188>
 8006b76:	065f      	lsls	r7, r3, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2ad      	uxthmi	r5, r5
 8006b7c:	6031      	str	r1, [r6, #0]
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	bf44      	itt	mi
 8006b82:	f043 0320 	orrmi.w	r3, r3, #32
 8006b86:	6023      	strmi	r3, [r4, #0]
 8006b88:	b11d      	cbz	r5, 8006b92 <_printf_i+0x19e>
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	e7ac      	b.n	8006ae8 <_printf_i+0xf4>
 8006b8e:	4827      	ldr	r0, [pc, #156]	@ (8006c2c <_printf_i+0x238>)
 8006b90:	e7e9      	b.n	8006b66 <_printf_i+0x172>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f023 0320 	bic.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	e7f6      	b.n	8006b8a <_printf_i+0x196>
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	e7bd      	b.n	8006b1c <_printf_i+0x128>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	6961      	ldr	r1, [r4, #20]
 8006ba6:	1d18      	adds	r0, r3, #4
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	062e      	lsls	r6, r5, #24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	d501      	bpl.n	8006bb4 <_printf_i+0x1c0>
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <_printf_i+0x1c6>
 8006bb4:	0668      	lsls	r0, r5, #25
 8006bb6:	d5fb      	bpl.n	8006bb0 <_printf_i+0x1bc>
 8006bb8:	8019      	strh	r1, [r3, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	e7bc      	b.n	8006b3c <_printf_i+0x148>
 8006bc2:	6833      	ldr	r3, [r6, #0]
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	6032      	str	r2, [r6, #0]
 8006bc8:	681e      	ldr	r6, [r3, #0]
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7f9 fb1e 	bl	8000210 <memchr>
 8006bd4:	b108      	cbz	r0, 8006bda <_printf_i+0x1e6>
 8006bd6:	1b80      	subs	r0, r0, r6
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	2300      	movs	r3, #0
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be4:	e7aa      	b.n	8006b3c <_printf_i+0x148>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0ad      	beq.n	8006b50 <_printf_i+0x15c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	079b      	lsls	r3, r3, #30
 8006bf8:	d413      	bmi.n	8006c22 <_printf_i+0x22e>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	bfb8      	it	lt
 8006c02:	4618      	movlt	r0, r3
 8006c04:	e7a6      	b.n	8006b54 <_printf_i+0x160>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d09d      	beq.n	8006b50 <_printf_i+0x15c>
 8006c14:	3501      	adds	r5, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dcf2      	bgt.n	8006c06 <_printf_i+0x212>
 8006c20:	e7eb      	b.n	8006bfa <_printf_i+0x206>
 8006c22:	2500      	movs	r5, #0
 8006c24:	f104 0619 	add.w	r6, r4, #25
 8006c28:	e7f5      	b.n	8006c16 <_printf_i+0x222>
 8006c2a:	bf00      	nop
 8006c2c:	080077de 	.word	0x080077de
 8006c30:	080077ef 	.word	0x080077ef

08006c34 <__sflush_r>:
 8006c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	0716      	lsls	r6, r2, #28
 8006c3e:	4605      	mov	r5, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	d454      	bmi.n	8006cee <__sflush_r+0xba>
 8006c44:	684b      	ldr	r3, [r1, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dc02      	bgt.n	8006c50 <__sflush_r+0x1c>
 8006c4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd48      	ble.n	8006ce2 <__sflush_r+0xae>
 8006c50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d045      	beq.n	8006ce2 <__sflush_r+0xae>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c5c:	682f      	ldr	r7, [r5, #0]
 8006c5e:	6a21      	ldr	r1, [r4, #32]
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	d030      	beq.n	8006cc6 <__sflush_r+0x92>
 8006c64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	0759      	lsls	r1, r3, #29
 8006c6a:	d505      	bpl.n	8006c78 <__sflush_r+0x44>
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c72:	b10b      	cbz	r3, 8006c78 <__sflush_r+0x44>
 8006c74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c7c:	6a21      	ldr	r1, [r4, #32]
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b0      	blx	r6
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	d106      	bne.n	8006c96 <__sflush_r+0x62>
 8006c88:	6829      	ldr	r1, [r5, #0]
 8006c8a:	291d      	cmp	r1, #29
 8006c8c:	d82b      	bhi.n	8006ce6 <__sflush_r+0xb2>
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d38 <__sflush_r+0x104>)
 8006c90:	410a      	asrs	r2, r1
 8006c92:	07d6      	lsls	r6, r2, #31
 8006c94:	d427      	bmi.n	8006ce6 <__sflush_r+0xb2>
 8006c96:	2200      	movs	r2, #0
 8006c98:	6062      	str	r2, [r4, #4]
 8006c9a:	04d9      	lsls	r1, r3, #19
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	6022      	str	r2, [r4, #0]
 8006ca0:	d504      	bpl.n	8006cac <__sflush_r+0x78>
 8006ca2:	1c42      	adds	r2, r0, #1
 8006ca4:	d101      	bne.n	8006caa <__sflush_r+0x76>
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	b903      	cbnz	r3, 8006cac <__sflush_r+0x78>
 8006caa:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cae:	602f      	str	r7, [r5, #0]
 8006cb0:	b1b9      	cbz	r1, 8006ce2 <__sflush_r+0xae>
 8006cb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	d002      	beq.n	8006cc0 <__sflush_r+0x8c>
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7ff fa92 	bl	80061e4 <_free_r>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cc4:	e00d      	b.n	8006ce2 <__sflush_r+0xae>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b0      	blx	r6
 8006ccc:	4602      	mov	r2, r0
 8006cce:	1c50      	adds	r0, r2, #1
 8006cd0:	d1c9      	bne.n	8006c66 <__sflush_r+0x32>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d0c6      	beq.n	8006c66 <__sflush_r+0x32>
 8006cd8:	2b1d      	cmp	r3, #29
 8006cda:	d001      	beq.n	8006ce0 <__sflush_r+0xac>
 8006cdc:	2b16      	cmp	r3, #22
 8006cde:	d11e      	bne.n	8006d1e <__sflush_r+0xea>
 8006ce0:	602f      	str	r7, [r5, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e022      	b.n	8006d2c <__sflush_r+0xf8>
 8006ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	e01b      	b.n	8006d26 <__sflush_r+0xf2>
 8006cee:	690f      	ldr	r7, [r1, #16]
 8006cf0:	2f00      	cmp	r7, #0
 8006cf2:	d0f6      	beq.n	8006ce2 <__sflush_r+0xae>
 8006cf4:	0793      	lsls	r3, r2, #30
 8006cf6:	680e      	ldr	r6, [r1, #0]
 8006cf8:	bf08      	it	eq
 8006cfa:	694b      	ldreq	r3, [r1, #20]
 8006cfc:	600f      	str	r7, [r1, #0]
 8006cfe:	bf18      	it	ne
 8006d00:	2300      	movne	r3, #0
 8006d02:	eba6 0807 	sub.w	r8, r6, r7
 8006d06:	608b      	str	r3, [r1, #8]
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	dde9      	ble.n	8006ce2 <__sflush_r+0xae>
 8006d0e:	6a21      	ldr	r1, [r4, #32]
 8006d10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d12:	4643      	mov	r3, r8
 8006d14:	463a      	mov	r2, r7
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b0      	blx	r6
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	dc08      	bgt.n	8006d30 <__sflush_r+0xfc>
 8006d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	4407      	add	r7, r0
 8006d32:	eba8 0800 	sub.w	r8, r8, r0
 8006d36:	e7e7      	b.n	8006d08 <__sflush_r+0xd4>
 8006d38:	dfbffffe 	.word	0xdfbffffe

08006d3c <_fflush_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	690b      	ldr	r3, [r1, #16]
 8006d40:	4605      	mov	r5, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	b913      	cbnz	r3, 8006d4c <_fflush_r+0x10>
 8006d46:	2500      	movs	r5, #0
 8006d48:	4628      	mov	r0, r5
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	b118      	cbz	r0, 8006d56 <_fflush_r+0x1a>
 8006d4e:	6a03      	ldr	r3, [r0, #32]
 8006d50:	b90b      	cbnz	r3, 8006d56 <_fflush_r+0x1a>
 8006d52:	f7fe ff71 	bl	8005c38 <__sinit>
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f3      	beq.n	8006d46 <_fflush_r+0xa>
 8006d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d60:	07d0      	lsls	r0, r2, #31
 8006d62:	d404      	bmi.n	8006d6e <_fflush_r+0x32>
 8006d64:	0599      	lsls	r1, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_fflush_r+0x32>
 8006d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d6a:	f7ff fa04 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4621      	mov	r1, r4
 8006d72:	f7ff ff5f 	bl	8006c34 <__sflush_r>
 8006d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d78:	07da      	lsls	r2, r3, #31
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	d4e4      	bmi.n	8006d48 <_fflush_r+0xc>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	059b      	lsls	r3, r3, #22
 8006d82:	d4e1      	bmi.n	8006d48 <_fflush_r+0xc>
 8006d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d86:	f7ff f9f7 	bl	8006178 <__retarget_lock_release_recursive>
 8006d8a:	e7dd      	b.n	8006d48 <_fflush_r+0xc>

08006d8c <fiprintf>:
 8006d8c:	b40e      	push	{r1, r2, r3}
 8006d8e:	b503      	push	{r0, r1, lr}
 8006d90:	4601      	mov	r1, r0
 8006d92:	ab03      	add	r3, sp, #12
 8006d94:	4805      	ldr	r0, [pc, #20]	@ (8006dac <fiprintf+0x20>)
 8006d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	f7ff fca3 	bl	80066e8 <_vfiprintf_r>
 8006da2:	b002      	add	sp, #8
 8006da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da8:	b003      	add	sp, #12
 8006daa:	4770      	bx	lr
 8006dac:	20000018 	.word	0x20000018

08006db0 <__swhatbuf_r>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	2900      	cmp	r1, #0
 8006dba:	b096      	sub	sp, #88	@ 0x58
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	461e      	mov	r6, r3
 8006dc0:	da0d      	bge.n	8006dde <__swhatbuf_r+0x2e>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2340      	movne	r3, #64	@ 0x40
 8006dd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	6031      	str	r1, [r6, #0]
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	b016      	add	sp, #88	@ 0x58
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	466a      	mov	r2, sp
 8006de0:	f000 f896 	bl	8006f10 <_fstat_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	dbec      	blt.n	8006dc2 <__swhatbuf_r+0x12>
 8006de8:	9901      	ldr	r1, [sp, #4]
 8006dea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006dee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006df2:	4259      	negs	r1, r3
 8006df4:	4159      	adcs	r1, r3
 8006df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dfa:	e7eb      	b.n	8006dd4 <__swhatbuf_r+0x24>

08006dfc <__smakebuf_r>:
 8006dfc:	898b      	ldrh	r3, [r1, #12]
 8006dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e00:	079d      	lsls	r5, r3, #30
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	d507      	bpl.n	8006e18 <__smakebuf_r+0x1c>
 8006e08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	2301      	movs	r3, #1
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	b003      	add	sp, #12
 8006e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e18:	ab01      	add	r3, sp, #4
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	f7ff ffc8 	bl	8006db0 <__swhatbuf_r>
 8006e20:	9f00      	ldr	r7, [sp, #0]
 8006e22:	4605      	mov	r5, r0
 8006e24:	4639      	mov	r1, r7
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7ff fa50 	bl	80062cc <_malloc_r>
 8006e2c:	b948      	cbnz	r0, 8006e42 <__smakebuf_r+0x46>
 8006e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e32:	059a      	lsls	r2, r3, #22
 8006e34:	d4ee      	bmi.n	8006e14 <__smakebuf_r+0x18>
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	f043 0302 	orr.w	r3, r3, #2
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	e7e2      	b.n	8006e08 <__smakebuf_r+0xc>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	6020      	str	r0, [r4, #0]
 8006e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e52:	b15b      	cbz	r3, 8006e6c <__smakebuf_r+0x70>
 8006e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f000 f86b 	bl	8006f34 <_isatty_r>
 8006e5e:	b128      	cbz	r0, 8006e6c <__smakebuf_r+0x70>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	431d      	orrs	r5, r3
 8006e70:	81a5      	strh	r5, [r4, #12]
 8006e72:	e7cf      	b.n	8006e14 <__smakebuf_r+0x18>

08006e74 <_putc_r>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	460d      	mov	r5, r1
 8006e78:	4614      	mov	r4, r2
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	b118      	cbz	r0, 8006e86 <_putc_r+0x12>
 8006e7e:	6a03      	ldr	r3, [r0, #32]
 8006e80:	b90b      	cbnz	r3, 8006e86 <_putc_r+0x12>
 8006e82:	f7fe fed9 	bl	8005c38 <__sinit>
 8006e86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e88:	07d8      	lsls	r0, r3, #31
 8006e8a:	d405      	bmi.n	8006e98 <_putc_r+0x24>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	0599      	lsls	r1, r3, #22
 8006e90:	d402      	bmi.n	8006e98 <_putc_r+0x24>
 8006e92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e94:	f7ff f96f 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006e98:	68a3      	ldr	r3, [r4, #8]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	da05      	bge.n	8006eae <_putc_r+0x3a>
 8006ea2:	69a2      	ldr	r2, [r4, #24]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	db12      	blt.n	8006ece <_putc_r+0x5a>
 8006ea8:	b2eb      	uxtb	r3, r5
 8006eaa:	2b0a      	cmp	r3, #10
 8006eac:	d00f      	beq.n	8006ece <_putc_r+0x5a>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	6022      	str	r2, [r4, #0]
 8006eb4:	701d      	strb	r5, [r3, #0]
 8006eb6:	b2ed      	uxtb	r5, r5
 8006eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eba:	07da      	lsls	r2, r3, #31
 8006ebc:	d405      	bmi.n	8006eca <_putc_r+0x56>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	059b      	lsls	r3, r3, #22
 8006ec2:	d402      	bmi.n	8006eca <_putc_r+0x56>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ec6:	f7ff f957 	bl	8006178 <__retarget_lock_release_recursive>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7fe ffc1 	bl	8005e5a <__swbuf_r>
 8006ed8:	4605      	mov	r5, r0
 8006eda:	e7ed      	b.n	8006eb8 <_putc_r+0x44>

08006edc <memmove>:
 8006edc:	4288      	cmp	r0, r1
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	eb01 0402 	add.w	r4, r1, r2
 8006ee4:	d902      	bls.n	8006eec <memmove+0x10>
 8006ee6:	4284      	cmp	r4, r0
 8006ee8:	4623      	mov	r3, r4
 8006eea:	d807      	bhi.n	8006efc <memmove+0x20>
 8006eec:	1e43      	subs	r3, r0, #1
 8006eee:	42a1      	cmp	r1, r4
 8006ef0:	d008      	beq.n	8006f04 <memmove+0x28>
 8006ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006efa:	e7f8      	b.n	8006eee <memmove+0x12>
 8006efc:	4402      	add	r2, r0
 8006efe:	4601      	mov	r1, r0
 8006f00:	428a      	cmp	r2, r1
 8006f02:	d100      	bne.n	8006f06 <memmove+0x2a>
 8006f04:	bd10      	pop	{r4, pc}
 8006f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f0e:	e7f7      	b.n	8006f00 <memmove+0x24>

08006f10 <_fstat_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	@ (8006f30 <_fstat_r+0x20>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7fa ff4d 	bl	8001dbc <_fstat>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_fstat_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_fstat_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000be4 	.word	0x20000be4

08006f34 <_isatty_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d06      	ldr	r5, [pc, #24]	@ (8006f50 <_isatty_r+0x1c>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fa ff4c 	bl	8001ddc <_isatty>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_isatty_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_isatty_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20000be4 	.word	0x20000be4

08006f54 <_sbrk_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	@ (8006f70 <_sbrk_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fa ff54 	bl	8001e0c <_sbrk>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_sbrk_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_sbrk_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000be4 	.word	0x20000be4

08006f74 <abort>:
 8006f74:	b508      	push	{r3, lr}
 8006f76:	2006      	movs	r0, #6
 8006f78:	f000 f85a 	bl	8007030 <raise>
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7fa fecd 	bl	8001d1c <_exit>

08006f82 <_realloc_r>:
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	4680      	mov	r8, r0
 8006f88:	4615      	mov	r5, r2
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	b921      	cbnz	r1, 8006f98 <_realloc_r+0x16>
 8006f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	4611      	mov	r1, r2
 8006f94:	f7ff b99a 	b.w	80062cc <_malloc_r>
 8006f98:	b92a      	cbnz	r2, 8006fa6 <_realloc_r+0x24>
 8006f9a:	f7ff f923 	bl	80061e4 <_free_r>
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa6:	f000 f85f 	bl	8007068 <_malloc_usable_size_r>
 8006faa:	4285      	cmp	r5, r0
 8006fac:	4606      	mov	r6, r0
 8006fae:	d802      	bhi.n	8006fb6 <_realloc_r+0x34>
 8006fb0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fb4:	d8f4      	bhi.n	8006fa0 <_realloc_r+0x1e>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4640      	mov	r0, r8
 8006fba:	f7ff f987 	bl	80062cc <_malloc_r>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d0ec      	beq.n	8006f9e <_realloc_r+0x1c>
 8006fc4:	42b5      	cmp	r5, r6
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4621      	mov	r1, r4
 8006fca:	bf28      	it	cs
 8006fcc:	4632      	movcs	r2, r6
 8006fce:	f7ff f8dc 	bl	800618a <memcpy>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	f7ff f905 	bl	80061e4 <_free_r>
 8006fda:	463c      	mov	r4, r7
 8006fdc:	e7e0      	b.n	8006fa0 <_realloc_r+0x1e>

08006fde <_raise_r>:
 8006fde:	291f      	cmp	r1, #31
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	d904      	bls.n	8006ff2 <_raise_r+0x14>
 8006fe8:	2316      	movs	r3, #22
 8006fea:	6003      	str	r3, [r0, #0]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	bd38      	pop	{r3, r4, r5, pc}
 8006ff2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ff4:	b112      	cbz	r2, 8006ffc <_raise_r+0x1e>
 8006ff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ffa:	b94b      	cbnz	r3, 8007010 <_raise_r+0x32>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 f831 	bl	8007064 <_getpid_r>
 8007002:	4622      	mov	r2, r4
 8007004:	4601      	mov	r1, r0
 8007006:	4628      	mov	r0, r5
 8007008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800700c:	f000 b818 	b.w	8007040 <_kill_r>
 8007010:	2b01      	cmp	r3, #1
 8007012:	d00a      	beq.n	800702a <_raise_r+0x4c>
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	d103      	bne.n	8007020 <_raise_r+0x42>
 8007018:	2316      	movs	r3, #22
 800701a:	6003      	str	r3, [r0, #0]
 800701c:	2001      	movs	r0, #1
 800701e:	e7e7      	b.n	8006ff0 <_raise_r+0x12>
 8007020:	2100      	movs	r1, #0
 8007022:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007026:	4620      	mov	r0, r4
 8007028:	4798      	blx	r3
 800702a:	2000      	movs	r0, #0
 800702c:	e7e0      	b.n	8006ff0 <_raise_r+0x12>
	...

08007030 <raise>:
 8007030:	4b02      	ldr	r3, [pc, #8]	@ (800703c <raise+0xc>)
 8007032:	4601      	mov	r1, r0
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f7ff bfd2 	b.w	8006fde <_raise_r>
 800703a:	bf00      	nop
 800703c:	20000018 	.word	0x20000018

08007040 <_kill_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	@ (8007060 <_kill_r+0x20>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa fe55 	bl	8001cfc <_kill>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_kill_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_kill_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	20000be4 	.word	0x20000be4

08007064 <_getpid_r>:
 8007064:	f7fa be42 	b.w	8001cec <_getpid>

08007068 <_malloc_usable_size_r>:
 8007068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800706c:	1f18      	subs	r0, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfbc      	itt	lt
 8007072:	580b      	ldrlt	r3, [r1, r0]
 8007074:	18c0      	addlt	r0, r0, r3
 8007076:	4770      	bx	lr

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr
